// This file is generated by Graphinx. Do not edit.
import type { BuiltData } from 'graphinx';
export const data: BuiltData = {
  "modules": [
    {
      "name": "global",
      "displayName": "Types globaux",
      "rawDocs": "---\ninline_types_from: [ZodError]\nmanually_include:\n  queries: [node, nodes]\n  types: [Node, PageInfo, BuildInfo]\n---\n\n# Types globaux\n\nTypes utilisés au travers de tout l'API.\n",
      "shortDescription": "Types utilisés au travers de tout l'API",
      "renderedDocs": "<html><head></head><body>\n<p>Types utilisés au travers de tout l'API.</p></body></html>",
      "types": [
        "Node",
        "PageInfo",
        "BuildInfo"
      ],
      "queries": [
        "node",
        "nodes"
      ],
      "mutations": [],
      "subscriptions": [],
      "items": []
    },
    {
      "name": "users",
      "displayName": "Users",
      "rawDocs": "# Users\n\nLes personnes utilisant l'application.\n\n## Inscription\n\nL'inscription se fait en deux ou trois parties: la première consiste à donner simplement une adresse e-mail et à la valider.\nEnsuite, on rentre le reste des informations.\nEnfin, si la personne déclare appartenir à une école mais que l'e-mail n'est pas dans le domaine de l'école (ce qui prouve automatiquement que la personne est étudiante), il faut qu'un admin confirme manuellement.\n\nCe n'est qu'après cette validation (quand elle est nécessaire) que l'objet `UserCandidate` est transformé en `User`.\n\n## Connexion\n\nLa mutation `login` permet la connexion.\n",
      "shortDescription": "Les personnes utilisant l'application",
      "renderedDocs": "<html><head></head><body>\n<p>Les personnes utilisant l'application.</p>\n<h2>Inscription</h2>\n<p>L'inscription se fait en deux ou trois parties: la première consiste à donner simplement une adresse e-mail et à la valider.\nEnsuite, on rentre le reste des informations.\nEnfin, si la personne déclare appartenir à une école mais que l'e-mail n'est pas dans le domaine de l'école (ce qui prouve automatiquement que la personne est étudiante), il faut qu'un admin confirme manuellement.</p>\n<p>Ce n'est qu'après cette validation (quand elle est nécessaire) que l'objet <code>UserCandidate</code> est transformé en <code>User</code>.</p>\n<h2>Connexion</h2>\n<p>La mutation <code>login</code> permet la connexion.</p></body></html>",
      "types": [],
      "queries": [
        "me"
      ],
      "mutations": [
        "deleteGodparentRequest"
      ],
      "subscriptions": [],
      "items": [
        {
          "name": "deleteGodparentRequest",
          "moduleName": "users",
          "type": "mutation",
          "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/users/"
        },
        {
          "name": "me",
          "moduleName": "users",
          "type": "query",
          "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/users/"
        }
      ]
    },
    {
      "name": "groups",
      "displayName": "Groupes",
      "rawDocs": "# Groupes\n\nGroupes de personnnes: peut être un club, une association, un bureau d'[AE](../student-associations), un groupe d'intégration ou un simple groupe (parfois dit \"groupe informel\").\n",
      "shortDescription": "Groupes de personnnes: peut être un club, une association, un bureau d'AE, un groupe d'intégration...",
      "renderedDocs": "<html><head></head><body>\n<p>Groupes de personnnes: peut être un club, une association, un bureau d'<a href=\"../student-associations\">AE</a>, un groupe d'intégration ou un simple groupe (parfois dit \"groupe informel\").</p></body></html>",
      "types": [
        "GroupType"
      ],
      "queries": [],
      "mutations": [
        "upsertGroup",
        "upsertGroupMember"
      ],
      "subscriptions": [],
      "items": [
        {
          "name": "upsertGroupMember",
          "moduleName": "groups",
          "type": "mutation",
          "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/groups/"
        },
        {
          "name": "GroupType",
          "moduleName": "groups",
          "type": "type",
          "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/packages/api/src/modules/groups/"
        },
        {
          "name": "upsertGroup",
          "moduleName": "groups",
          "type": "mutation",
          "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/groups/"
        }
      ]
    },
    {
      "name": "ticketing",
      "displayName": "Billetterie",
      "rawDocs": "# Billetterie\n\nBillets et réservations de places sur des [évènements](/events).\n",
      "shortDescription": "Billets et réservations de places sur des évènements",
      "renderedDocs": "<html><head></head><body>\n<p>Billets et réservations de places sur des <a href=\"/events\">évènements</a>.</p></body></html>",
      "types": [],
      "queries": [],
      "mutations": [
        "cancelRegistration",
        "paidRegistration"
      ],
      "subscriptions": [],
      "items": [
        {
          "name": "cancelRegistration",
          "moduleName": "ticketing",
          "type": "mutation",
          "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/ticketing/"
        },
        {
          "name": "paidRegistration",
          "moduleName": "ticketing",
          "type": "mutation",
          "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/ticketing/"
        }
      ]
    },
    {
      "name": "shop",
      "displayName": "Boutique",
      "rawDocs": "# Boutique\n\nSystème de boutique permettant aux groupes de mettre en vente des produits.\n",
      "shortDescription": "Système de boutique permettant aux groupes de mettre en vente des produits",
      "renderedDocs": "<html><head></head><body>\n<p>Système de boutique permettant aux groupes de mettre en vente des produits.</p></body></html>",
      "types": [],
      "queries": [],
      "mutations": [
        "updateItemPicture"
      ],
      "subscriptions": [],
      "items": [
        {
          "name": "updateItemPicture",
          "moduleName": "shop",
          "type": "mutation",
          "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/shop/"
        }
      ]
    },
    {
      "name": "documents",
      "displayName": "Documents (La Frappe)",
      "rawDocs": "---\ninline_types_from: [HealthCheck]\n---\n\n# Documents (La Frappe)\n\nDocuments publiés dans des [matières](../curriculum).\n\nNommé \"La Frappe\" au sein des écoles de Toulouse INP.\n",
      "shortDescription": "Documents publiés dans des matières",
      "renderedDocs": "<html><head></head><body>\n<p>Documents publiés dans des <a href=\"../curriculum\">matières</a>.</p>\n<p>Nommé \"La Frappe\" au sein des écoles de Toulouse INP.</p></body></html>",
      "types": [],
      "queries": [
        "searchDocuments"
      ],
      "mutations": [],
      "subscriptions": [],
      "items": [
        {
          "name": "searchDocuments",
          "moduleName": "documents",
          "type": "query",
          "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/documents/"
        }
      ]
    },
    {
      "name": "notifications",
      "displayName": "Notifications",
      "rawDocs": "---\ninline_types: [NotificationSubscriptionKeysInput]\n---\n\n# Notifications\n\nNotifications envoyées aux utilisateurs.\n",
      "shortDescription": "Notifications envoyées aux utilisateurs",
      "renderedDocs": "<html><head></head><body>\n<p>Notifications envoyées aux utilisateurs.</p></body></html>",
      "types": [],
      "queries": [
        "notification"
      ],
      "mutations": [],
      "subscriptions": [],
      "items": [
        {
          "name": "notification",
          "moduleName": "notifications",
          "type": "query",
          "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/notifications/"
        }
      ]
    },
    {
      "name": "services",
      "displayName": "Services",
      "rawDocs": "# Services\n\nServices externes proposés par une [AE](../student-associations), une [école](../schools) ou un [groupe](../groups).\n",
      "shortDescription": "Services externes proposés par une AE, une école ou un groupe",
      "renderedDocs": "<html><head></head><body>\n<p>Services externes proposés par une <a href=\"../student-associations\">AE</a>, une <a href=\"../schools\">école</a> ou un <a href=\"../groups\">groupe</a>.</p></body></html>",
      "types": [],
      "queries": [
        "userServices"
      ],
      "mutations": [],
      "subscriptions": [],
      "items": [
        {
          "name": "userServices",
          "moduleName": "services",
          "type": "query",
          "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/services/"
        }
      ]
    },
    {
      "name": "student-associations",
      "displayName": "Associations étudiantes",
      "rawDocs": "# Associations étudiantes\n\nAssociations Étudiantes de chaque [école](/schools). Il n'y a qu'une seule _AE_ par école.\n",
      "shortDescription": "Associations Étudiantes de chaque école",
      "renderedDocs": "<html><head></head><body>\n<p>Associations Étudiantes de chaque <a href=\"/schools\">école</a>. Il n'y a qu'une seule <em>AE</em> par école.</p></body></html>",
      "types": [],
      "queries": [
        "studentAssociation"
      ],
      "mutations": [],
      "subscriptions": [],
      "items": [
        {
          "name": "studentAssociation",
          "moduleName": "student-associations",
          "type": "query",
          "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/student-associations/"
        }
      ]
    },
    {
      "name": "schools",
      "displayName": "Écoles",
      "rawDocs": "# Écoles\n\nÉcoles présentes sur l'application.\n",
      "shortDescription": "Écoles présentes sur l'application",
      "renderedDocs": "<html><head></head><body>\n<p>Écoles présentes sur l'application.</p></body></html>",
      "types": [],
      "queries": [
        "school"
      ],
      "mutations": [],
      "subscriptions": [],
      "items": [
        {
          "name": "school",
          "moduleName": "schools",
          "type": "query",
          "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/schools/"
        }
      ]
    },
    {
      "name": "reactions",
      "displayName": "Réactions",
      "rawDocs": "# Réactions\n\nRéactions (likes, etc) sur les différents objets de l'application (évènements, posts, etc)\n",
      "shortDescription": "Réactions (likes, etc) sur les différents objets de l'application (évènements, posts, etc)",
      "renderedDocs": "<html><head></head><body>\n<p>Réactions (likes, etc) sur les différents objets de l'application (évènements, posts, etc)</p></body></html>",
      "types": [],
      "queries": [
        "reaction"
      ],
      "mutations": [
        "deleteReaction"
      ],
      "subscriptions": [],
      "items": [
        {
          "name": "reaction",
          "moduleName": "reactions",
          "type": "query",
          "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/reactions/"
        },
        {
          "name": "deleteReaction",
          "moduleName": "reactions",
          "type": "mutation",
          "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/reactions/"
        }
      ]
    },
    {
      "name": "oauth",
      "displayName": "Applications tierces (OAuth)",
      "rawDocs": "---\ninline_types: [ThirdPartyAppResponse]\n---\n\n# Applications tierces (OAuth)\n\nChurros fournit un service de provider OAuth.\n\nDes applications tierces peuvent utiliser l'API de Churros au nom d'une personne, si celle-ci autorise l'application.\n\n## Endpoints utiles\n\n- **URL d'autorisation**: `https://churros.inpt.fr/authorize`\n- **URL d'obtention d'un token**: `https://churros.inpt.fr/token`\n- **URL d'obtention d'informations basiques sur l'utilisateur·ice connecté·e**: `https://churros.inpt.fr/identity`\n\n  Renvoie un JSON, contenant les informations suivantes:\n\n  - `uid`: nom d'utilisateur·ice unique (le \"@\")\n  - `email`: adresse email\n  - `ldapInternalEmail`: adresse email en `@bde.enseeiht.fr` (pour les n7iens)\n  - `fullName`: nom d'affichage\n  - `firstName`: prénom\n  - `lastName`: nom de famille\n  - `groupsUids`: uids des groupes dont l'utilisateur·ice est membre\n\nPour en savoir plus, voir la [documentation OAuth2 de Churros](https://wiki.inpt.fr/inp-net/public/oauth-churros)\n",
      "shortDescription": "Churros fournit un service de provider OAuth",
      "renderedDocs": "<html><head></head><body>\n<p>Churros fournit un service de provider OAuth.</p>\n<p>Des applications tierces peuvent utiliser l'API de Churros au nom d'une personne, si celle-ci autorise l'application.</p>\n<h2>Endpoints utiles</h2>\n<ul>\n<li>\n<p><strong>URL d'autorisation</strong>: <code>https://churros.inpt.fr/authorize</code></p>\n</li>\n<li>\n<p><strong>URL d'obtention d'un token</strong>: <code>https://churros.inpt.fr/token</code></p>\n</li>\n<li>\n<p><strong>URL d'obtention d'informations basiques sur l'utilisateur·ice connecté·e</strong>: <code>https://churros.inpt.fr/identity</code></p>\n<p>Renvoie un JSON, contenant les informations suivantes:</p>\n<ul>\n<li><code>uid</code>: nom d'utilisateur·ice unique (le \"@\")</li>\n<li><code>email</code>: adresse email</li>\n<li><code>ldapInternalEmail</code>: adresse email en <code>@bde.enseeiht.fr</code> (pour les n7iens)</li>\n<li><code>fullName</code>: nom d'affichage</li>\n<li><code>firstName</code>: prénom</li>\n<li><code>lastName</code>: nom de famille</li>\n<li><code>groupsUids</code>: uids des groupes dont l'utilisateur·ice est membre</li>\n</ul>\n</li>\n</ul>\n<p>Pour en savoir plus, voir la <a href=\"https://wiki.inpt.fr/inp-net/public/oauth-churros\">documentation OAuth2 de Churros</a></p></body></html>",
      "types": [],
      "queries": [],
      "mutations": [
        "deactivateApp"
      ],
      "subscriptions": [],
      "items": [
        {
          "name": "deactivateApp",
          "moduleName": "oauth",
          "type": "mutation",
          "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/oauth/"
        }
      ]
    },
    {
      "name": "announcements",
      "displayName": "Annonces",
      "rawDocs": "# Annonces\n\nAnnonces effectuées par les administrateur·ice·s de l'application.\nÀ afficher à tout le monde (connecté ou non) de manière visible au travers de toute l'application.\n",
      "shortDescription": "Annonces effectuées par les administrateur·ice·s de l'application",
      "renderedDocs": "<html><head></head><body>\n<p>Annonces effectuées par les administrateur·ice·s de l'application.\nÀ afficher à tout le monde (connecté ou non) de manière visible au travers de toute l'application.</p></body></html>",
      "types": [],
      "queries": [
        "announcementsNow"
      ],
      "mutations": [],
      "subscriptions": [
        "announcementsNow"
      ],
      "items": [
        {
          "name": "announcementsNow",
          "moduleName": "announcements",
          "type": "query",
          "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/announcements/"
        }
      ]
    },
    {
      "name": "payments",
      "displayName": "Paiements",
      "rawDocs": "---\ninline_types_from: [ProfitsBreakdown]\n---\n\n# Paiements\n\nIntégrations avec différents prestataires de paiements, notamment [Lydia](https://lydia-app.com) et [PayPal](https://paypal.com).\n",
      "shortDescription": "Intégrations avec différents prestataires de paiements, notamment Lydia et PayPal",
      "renderedDocs": "<html><head></head><body>\n<p>Intégrations avec différents prestataires de paiements, notamment <a href=\"https://lydia-app.com\">Lydia</a> et <a href=\"https://paypal.com\">PayPal</a>.</p></body></html>",
      "types": [],
      "queries": [
        "lydiaAccountsOfGroup"
      ],
      "mutations": [],
      "subscriptions": [],
      "items": [
        {
          "name": "lydiaAccountsOfGroup",
          "moduleName": "payments",
          "type": "query",
          "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/payments/"
        }
      ]
    }
  ],
  "index": {
    "displayName": "Index",
    "rawDocs": "Le schéma GraphQL entier",
    "renderedDocs": "<html><head></head><body><p>Le schéma GraphQL entier</p></body></html>",
    "shortDescription": "Le schéma GraphQL entier",
    "name": "index",
    "mutations": [
      "acceptRegistration",
      "acknowledgeChangelog",
      "activateApp",
      "addFileToPage",
      "addGroupMember",
      "answerFileQuestion",
      "answerFormSection",
      "authorize",
      "cancelPendingContribution",
      "cancelRegistration",
      "checkIfRegistrationIsPaid",
      "claimPromotionCode",
      "completeRegistration",
      "contribute",
      "createBot",
      "createGitlabIssue",
      "createGoogleWalletPass",
      "createLinkedGoogleSheet",
      "createPasswordReset",
      "createQuickSignup",
      "deactivateApp",
      "deleteAnnouncement",
      "deleteArticle",
      "deleteArticlePicture",
      "deleteBarWeek",
      "deleteComment",
      "deleteDocument",
      "deleteDocumentFile",
      "deleteEvent",
      "deleteEventManager",
      "deleteEventPicture",
      "deleteGodchild",
      "deleteGodparentRequest",
      "deleteGroup",
      "deleteGroupMember",
      "deleteGroupPicture",
      "deleteItemPicture",
      "deleteNotificationSubscription",
      "deletePage",
      "deleteQuickSignup",
      "deleteReaction",
      "deleteRegistration",
      "deleteSchoolPicture",
      "deleteShopItem",
      "deleteShopOption",
      "deleteTicket",
      "deleteTicketGroup",
      "deleteToken",
      "deleteUserPicture",
      "editApp",
      "finishPaypalRegistrationPayment",
      "kioskReload",
      "login",
      "logout",
      "mailFormAnswers",
      "mergeDocuments",
      "opposeRegistration",
      "paidRegistration",
      "paidShopPayment",
      "refuseRegistration",
      "registerApp",
      "registerGoogleCredential",
      "removeFileFromPage",
      "renameSession",
      "requestEmailChange",
      "resetPassword",
      "revokeAuthorization",
      "rotateAppSecret",
      "selfJoinGroup",
      "sendNotification",
      "setDocumentFileIsSolution",
      "setFormAnswersCheckbox",
      "startRegistration",
      "syncUserLdap",
      "testNotification",
      "toggleReaction",
      "updateArticlePicture",
      "updateEventPicture",
      "updateGroupPicture",
      "updateItemPicture",
      "updateNotificationSettings",
      "updateRoomOpenState",
      "updateSchool",
      "updateSchoolPicture",
      "updateStudentAssociationPicture",
      "updateSubjectsExamDates",
      "updateUser",
      "updateUserCandidate",
      "updateUserPermissions",
      "updateUserPicture",
      "uploadDocumentFile",
      "upsertAnnouncement",
      "upsertArticle",
      "upsertBarWeek",
      "upsertComment",
      "upsertDocument",
      "upsertEvent",
      "upsertForm",
      "upsertFormSection",
      "upsertGodparentRequest",
      "upsertGroup",
      "upsertGroupMember",
      "upsertLydiaAccount",
      "upsertManagersOfEvent",
      "upsertNotificationSubscription",
      "upsertPage",
      "upsertQuestion",
      "upsertReaction",
      "upsertRegistration",
      "upsertService",
      "upsertShopItem",
      "upsertShopOptions",
      "upsertShopPayment",
      "upsertTicketGroup",
      "usePasswordReset",
      "validateEmail",
      "verifyBooking"
    ],
    "queries": [
      "allApps",
      "allForms",
      "allUsers",
      "announcement",
      "announcements",
      "announcementsNow",
      "article",
      "barWeek",
      "barWeekNow",
      "barWeeks",
      "birthdays",
      "buildInfo",
      "changelog",
      "codeContributors",
      "combinedChangelog",
      "contributionOptions",
      "document",
      "documents",
      "event",
      "eventManager",
      "events",
      "eventsByDay",
      "eventsInWeek",
      "existsInSchoolLdap",
      "form",
      "forms",
      "godparentRequest",
      "godparentRequests",
      "group",
      "groupMembersCsv",
      "groups",
      "healthcheck",
      "homepage",
      "issue",
      "issuesByUser",
      "kioskReload",
      "logs",
      "lydiaAccount",
      "lydiaAccounts",
      "lydiaAccountsOfGroup",
      "major",
      "majors",
      "me",
      "minor",
      "minors",
      "myApps",
      "notification",
      "notificationSubscription",
      "notificationSubscriptions",
      "notifications",
      "notificationsSendCountForArticle",
      "page",
      "pages",
      "quickSignups",
      "reaction",
      "reactions",
      "registration",
      "registrationQRCode",
      "registrationsOfUser",
      "renderMarkdown",
      "school",
      "schoolGroups",
      "schools",
      "searchArticles",
      "searchDocuments",
      "searchEvents",
      "searchForms",
      "searchGroups",
      "searchUsers",
      "service",
      "services",
      "shopItem",
      "shopPayments",
      "studentAssociation",
      "studentAssociations",
      "subject",
      "subjects",
      "thirdPartyApp",
      "ticketGroup",
      "uidIsAvailable",
      "upcomingChangelog",
      "user",
      "userByEmail",
      "userCandidate",
      "userCandidateByEmail",
      "userCandidates",
      "userServices"
    ],
    "subscriptions": [
      "announcementsNow",
      "article",
      "event",
      "form",
      "homepage",
      "kioskReload",
      "registration",
      "thirdPartyApp"
    ],
    "types": [
      "Announcement",
      "ID",
      "Answer",
      "AnswerDate",
      "AnswerFileUpload",
      "AnswerInput",
      "AnswerLongText",
      "AnswerNumber",
      "AnswerScale",
      "AnswerSearchResult",
      "AnswerSelectMultiple",
      "AnswerSelectOne",
      "AnswerText",
      "AnswerTime",
      "AnswersExportFormats",
      "AnswersOfUser",
      "ApiRateLimitHits",
      "ApiUsage",
      "ApiUsageQueryType",
      "Article",
      "ArticleSearchResultType",
      "AwaitingValidationError",
      "BarWeek",
      "BooleanMap",
      "BuildInfo",
      "ChangelogRelease",
      "Comment",
      "Commentable",
      "CommentsConnection",
      "CommentsEdge",
      "CompleteSignupResult",
      "ContributionOption",
      "Counts",
      "Credential",
      "CredentialType",
      "DatabaseHealthCheck",
      "DateTime",
      "Document",
      "DocumentSearchResult",
      "DocumentType",
      "EmailChange",
      "Error",
      "ErrorInterface",
      "EvenSearchResult",
      "Event",
      "EventBookingsConnection",
      "EventBookingsConnectionEdge",
      "EventBookingsCsvResult",
      "EventBookingsCsvSuccess",
      "EventFrequency",
      "EventLogsConnection",
      "EventLogsConnectionEdge",
      "EventManager",
      "EventManagerPowerLevel",
      "EventMyBookingsResult",
      "EventMyBookingsSuccess",
      "EventsByDay",
      "FamilyTree",
      "File",
      "Form",
      "FormAnswersByUserConnection",
      "FormAnswersByUserConnectionEdge",
      "FormAnswersConnection",
      "FormAnswersConnectionEdge",
      "FormQuestionsConnection",
      "FormQuestionsConnectionEdge",
      "FormSearchResult",
      "FormSection",
      "FormSectionAnswersConnection",
      "FormSectionAnswersConnectionEdge",
      "GodparentRequest",
      "Group",
      "GroupEventsConnection",
      "GroupEventsConnectionEdge",
      "GroupMember",
      "GroupSearchResult",
      "GroupShopItemsConnection",
      "GroupShopItemsConnectionEdge",
      "GroupType",
      "HealthCheck",
      "Issue",
      "IssueComment",
      "IssueState",
      "LdapHealthCheck",
      "Link",
      "LinkInput",
      "LogEntry",
      "LogoSourceType",
      "LydiaAccount",
      "MailHealthCheck",
      "Major",
      "ManagerOfEventInput",
      "Minor",
      "MutationAcceptRegistrationResult",
      "MutationAcceptRegistrationSuccess",
      "MutationAddFileToPageResult",
      "MutationAddFileToPageSuccess",
      "MutationAddGroupMemberResult",
      "MutationAddGroupMemberSuccess",
      "MutationAnswerFormSectionResult",
      "MutationAnswerFormSectionSuccess",
      "MutationAuthorizeResult",
      "MutationAuthorizeSuccess",
      "MutationCancelRegistrationResult",
      "MutationCancelRegistrationSuccess",
      "MutationCompleteRegistrationResult",
      "MutationCompleteRegistrationSuccess",
      "MutationContributeResult",
      "MutationContributeSuccess",
      "MutationCreatePasswordResetResult",
      "MutationCreatePasswordResetSuccess",
      "MutationDeletePageResult",
      "MutationDeletePageSuccess",
      "MutationDeleteShopItemResult",
      "MutationDeleteShopItemSuccess",
      "MutationFinishPaypalRegistrationPaymentResult",
      "MutationFinishPaypalRegistrationPaymentSuccess",
      "MutationLoginResult",
      "MutationLoginSuccess",
      "MutationMailFormAnswersResult",
      "MutationMailFormAnswersSuccess",
      "MutationOpposeRegistrationResult",
      "MutationOpposeRegistrationSuccess",
      "MutationPaidRegistrationResult",
      "MutationPaidRegistrationSuccess",
      "MutationPaidShopPaymentResult",
      "MutationPaidShopPaymentSuccess",
      "MutationRegisterGoogleCredentialResult",
      "MutationRegisterGoogleCredentialSuccess",
      "MutationRemoveFileFromPageResult",
      "MutationRemoveFileFromPageSuccess",
      "MutationRequestEmailChangeResult",
      "MutationRequestEmailChangeSuccess",
      "MutationResetPasswordResult",
      "MutationResetPasswordSuccess",
      "MutationStartRegistrationResult",
      "MutationStartRegistrationSuccess",
      "MutationUpdateUserCandidateResult",
      "MutationUpdateUserCandidateSuccess",
      "MutationUpdateUserResult",
      "MutationUpdateUserSuccess",
      "MutationUpsertAnnouncementResult",
      "MutationUpsertAnnouncementSuccess",
      "MutationUpsertArticleResult",
      "MutationUpsertArticleSuccess",
      "MutationUpsertBarWeekResult",
      "MutationUpsertBarWeekSuccess",
      "MutationUpsertDocumentResult",
      "MutationUpsertDocumentSuccess",
      "MutationUpsertEventResult",
      "MutationUpsertEventSuccess",
      "MutationUpsertFormInput",
      "MutationUpsertFormSectionInput",
      "MutationUpsertGodparentRequestResult",
      "MutationUpsertGodparentRequestSuccess",
      "MutationUpsertGroupResult",
      "MutationUpsertGroupSuccess",
      "MutationUpsertPageResult",
      "MutationUpsertPageSuccess",
      "MutationUpsertQuestionInput",
      "MutationUpsertRegistrationResult",
      "MutationUpsertRegistrationSuccess",
      "MutationUpsertServiceResult",
      "MutationUpsertServiceSuccess",
      "MutationUpsertShopItemResult",
      "MutationUpsertShopItemSuccess",
      "MutationUpsertShopPaymentResult",
      "MutationUpsertShopPaymentSuccess",
      "MutationUsePasswordResetResult",
      "MutationUsePasswordResetSuccess",
      "MutationValidateEmailResult",
      "MutationValidateEmailSuccess",
      "MutationVerifyBookingResult",
      "MutationVerifyBookingSuccess",
      "Node",
      "NotFoundError",
      "Notification",
      "NotificationChannel",
      "NotificationSubscription",
      "NotificationSubscriptionKeysInput",
      "OAuth2Error",
      "OAuth2ErrorCode",
      "Page",
      "PageInfo",
      "PagesConnection",
      "PagesEdge",
      "PaymentMethod",
      "Picture",
      "Pictured",
      "ProfitsBreakdown",
      "ProfitsBreakdownByPaymentMethod",
      "ProfitsBreakdownByTicket",
      "PromotionType",
      "QRCode",
      "QueryAllFormsConnection",
      "QueryAllFormsConnectionEdge",
      "QueryAllUsersConnection",
      "QueryAllUsersConnectionEdge",
      "QueryAnnouncementsConnection",
      "QueryAnnouncementsConnectionEdge",
      "QueryCodeContributorsResult",
      "QueryCodeContributorsSuccess",
      "QueryCombinedChangelogResult",
      "QueryCombinedChangelogSuccess",
      "QueryDocumentsConnection",
      "QueryDocumentsConnectionEdge",
      "QueryEventsByDayConnection",
      "QueryEventsByDayConnectionEdge",
      "QueryEventsConnection",
      "QueryEventsConnectionEdge",
      "QueryFormsConnection",
      "QueryFormsConnectionEdge",
      "QueryGroupMembersCsvResult",
      "QueryGroupMembersCsvSuccess",
      "QueryHomepageConnection",
      "QueryHomepageConnectionEdge",
      "QueryLogsConnection",
      "QueryLogsConnectionEdge",
      "QueryMinorsConnection",
      "QueryMinorsConnectionEdge",
      "QueryNotificationsConnection",
      "QueryNotificationsConnectionEdge",
      "QueryPagesConnection",
      "QueryPagesConnectionEdge",
      "QueryQuickSignupsConnection",
      "QueryQuickSignupsConnectionEdge",
      "QueryReactionsConnection",
      "QueryReactionsConnectionEdge",
      "QueryRegistrationResult",
      "QueryRegistrationSuccess",
      "QueryRegistrationsOfUserConnection",
      "QueryRegistrationsOfUserConnectionEdge",
      "QueryUpcomingChangelogResult",
      "QueryUpcomingChangelogSuccess",
      "QueryUserCandidatesConnection",
      "QueryUserCandidatesConnectionEdge",
      "Question",
      "QuestionAnswersConnection",
      "QuestionAnswersConnectionEdge",
      "QuestionFileUpload",
      "QuestionKind",
      "QuestionOptionInput",
      "QuestionScalar",
      "QuestionScale",
      "QuestionScaleInput",
      "QuestionSelectMultiple",
      "QuestionSelectOne",
      "QuickSignup",
      "Reactable",
      "Reaction",
      "RedisHealthCheck",
      "Registration",
      "RegistrationSearchResult",
      "RegistrationVerificationResult",
      "RegistrationVerificationState",
      "RegistrationsCounts",
      "ReleaseChange",
      "ReleaseChangesMaps",
      "School",
      "SchoolGroup",
      "SchoolInput",
      "Service",
      "ShopItem",
      "ShopItemAnswer",
      "ShopItemOption",
      "ShopItemOptionInput",
      "ShopPayment",
      "SortDirection",
      "StringToIntMapping",
      "StudentAssociation",
      "StudentAssociationGroupsConnection",
      "StudentAssociationGroupsConnectionEdge",
      "Subject",
      "SubjectDocumentsConnection",
      "SubjectDocumentsConnectionEdge",
      "SubscriptionRegistrationResult",
      "SubscriptionRegistrationSuccess",
      "TeachingUnit",
      "ThirdPartyApp",
      "ThirdPartyAppApiUsageConnection",
      "ThirdPartyAppApiUsageConnectionEdge",
      "ThirdPartyAppLogsConnection",
      "ThirdPartyAppLogsConnectionEdge",
      "ThirdPartyAppRateLimitHitsConnection",
      "ThirdPartyAppRateLimitHitsConnectionEdge",
      "ThirdPartyAppRegistrationResponse",
      "ThirdPartyAppUsersConnection",
      "ThirdPartyAppUsersConnectionEdge",
      "Ticket",
      "TicketGroup",
      "TicketGroupInput",
      "TicketInput",
      "UID",
      "UpsertGroupInput",
      "User",
      "UserAnsweredFormsConnection",
      "UserAnsweredFormsConnectionEdge",
      "UserArticlesConnection",
      "UserArticlesConnectionEdge",
      "UserBookingsConnection",
      "UserBookingsConnectionEdge",
      "UserCandidate",
      "UserPartiallyAnsweredFormsConnection",
      "UserPartiallyAnsweredFormsConnectionEdge",
      "UserSearchResult",
      "Visibility",
      "ZodError",
      "ZodFieldError"
    ]
  },
  "schema": "\"\"\"\nAnnouncement is a way to get a message accross the entire site, such as for maintenance announcements.\n\"\"\"\ntype Announcement implements Node {\n  body: String!\n  bodyHtml: String!\n  by: User\n  createdAt: DateTime!\n  endsAt: DateTime!\n  id: ID!\n  startsAt: DateTime!\n  title: String!\n  updatedAt: DateTime!\n  userId: ID\n  warning: Boolean!\n}\n\n\"\"\"\nUne réponse à un formulaire. Les réponses peuvent être de plusieurs types différents (en fonction de la question).\n\"\"\"\ninterface Answer {\n  answerString: String!\n\n  \"\"\"Réservation associée à la réponse\"\"\"\n  booking: Registration\n  checkboxIsMarked: Boolean\n\n  \"\"\"Date de création de la réponse\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Utilisateur ayant répondu à la question\"\"\"\n  createdBy: User\n\n  \"\"\"Formulaire auquel appartient la question\"\"\"\n  form: Form!\n\n  \"\"\"Préfixe de l'identifiant: `answer:`\"\"\"\n  id: ID!\n  question: Question!\n\n  \"\"\"Section du formulaire auquel appartient la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Date de dernière mise à jour de la réponse\"\"\"\n  updatedAt: DateTime!\n}\n\n\"\"\"Réponse de type `Date` (voir [`QuestionKind`](#QuestionKind))\"\"\"\ntype AnswerDate implements Answer {\n  answerString: String!\n\n  \"\"\"Réservation associée à la réponse\"\"\"\n  booking: Registration\n  checkboxIsMarked: Boolean\n\n  \"\"\"Date de création de la réponse\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Utilisateur ayant répondu à la question\"\"\"\n  createdBy: User\n\n  \"\"\"Formulaire auquel appartient la question\"\"\"\n  form: Form!\n\n  \"\"\"Préfixe de l'identifiant: `answer:`\"\"\"\n  id: ID!\n\n  \"\"\"Question à laquelle la réponse est associée\"\"\"\n  question: QuestionScalar!\n\n  \"\"\"Réponse donnée, brute (sous forme de texte)\"\"\"\n  rawValue: String\n\n  \"\"\"Section du formulaire auquel appartient la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Date de dernière mise à jour de la réponse\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"Réponse donnée\"\"\"\n  value: DateTime\n}\n\n\"\"\"Réponse de type `FileUpload` (voir [`QuestionKind`](#QuestionKind))\"\"\"\ntype AnswerFileUpload implements Answer {\n  answerString: String!\n\n  \"\"\"Réservation associée à la réponse\"\"\"\n  booking: Registration\n  checkboxIsMarked: Boolean\n\n  \"\"\"Date de création de la réponse\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Utilisateur ayant répondu à la question\"\"\"\n  createdBy: User\n\n  \"\"\"Formulaire auquel appartient la question\"\"\"\n  form: Form!\n\n  \"\"\"Préfixe de l'identifiant: `answer:`\"\"\"\n  id: ID!\n\n  \"\"\"Question à laquelle la réponse est associée\"\"\"\n  question: QuestionFileUpload!\n\n  \"\"\"Section du formulaire auquel appartient la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Date de dernière mise à jour de la réponse\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"Réponse donnée\"\"\"\n  value: String\n}\n\ninput AnswerInput {\n  \"\"\"\n  Réponse à la question. Pour les questions à une seule réponse, ne mettre qu'un seul élément.\n      \n  - Pour les questions de type `Date`, utiliser le format `YYYY-mm-dd`\n  - Pour les questions de type `Time`, utiliser le format `HH:MM:ss`\n  - Pour les questions de type `Scale`, utiliser simplement le nombre répondu par l'utilisateur·ice\n  - Pour les questions de type `FileUpload`, utiliser la mutation [`answerFileQuestion`](#mutation/answerFileQuestion)\n  \"\"\"\n  answer: [String!]!\n\n  \"\"\"ID de la question à laquelle répondre\"\"\"\n  question: ID!\n}\n\n\"\"\"Réponse de type `LongText` (voir [`QuestionKind`](#QuestionKind))\"\"\"\ntype AnswerLongText implements Answer {\n  answerString: String!\n\n  \"\"\"Réservation associée à la réponse\"\"\"\n  booking: Registration\n  checkboxIsMarked: Boolean\n\n  \"\"\"Date de création de la réponse\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Utilisateur ayant répondu à la question\"\"\"\n  createdBy: User\n\n  \"\"\"Formulaire auquel appartient la question\"\"\"\n  form: Form!\n\n  \"\"\"Préfixe de l'identifiant: `answer:`\"\"\"\n  id: ID!\n\n  \"\"\"Question à laquelle la réponse est associée\"\"\"\n  question: QuestionScalar!\n\n  \"\"\"Section du formulaire auquel appartient la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Date de dernière mise à jour de la réponse\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"Réponse donnée\"\"\"\n  value: String\n}\n\n\"\"\"Réponse de type `Number` (voir [`QuestionKind`](#QuestionKind))\"\"\"\ntype AnswerNumber implements Answer {\n  answerString: String!\n\n  \"\"\"Réservation associée à la réponse\"\"\"\n  booking: Registration\n  checkboxIsMarked: Boolean\n\n  \"\"\"Date de création de la réponse\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Utilisateur ayant répondu à la question\"\"\"\n  createdBy: User\n\n  \"\"\"Formulaire auquel appartient la question\"\"\"\n  form: Form!\n\n  \"\"\"Préfixe de l'identifiant: `answer:`\"\"\"\n  id: ID!\n\n  \"\"\"Question à laquelle la réponse est associée\"\"\"\n  question: QuestionScalar!\n\n  \"\"\"Section du formulaire auquel appartient la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Date de dernière mise à jour de la réponse\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"Réponse donnée\"\"\"\n  value: Float\n}\n\n\"\"\"Réponse de type `Scale` (voir [`QuestionKind`](#QuestionKind))\"\"\"\ntype AnswerScale implements Answer {\n  answerString: String!\n\n  \"\"\"Réservation associée à la réponse\"\"\"\n  booking: Registration\n  checkboxIsMarked: Boolean\n\n  \"\"\"Date de création de la réponse\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Utilisateur ayant répondu à la question\"\"\"\n  createdBy: User\n\n  \"\"\"Formulaire auquel appartient la question\"\"\"\n  form: Form!\n\n  \"\"\"Préfixe de l'identifiant: `answer:`\"\"\"\n  id: ID!\n\n  \"\"\"Réponse donnée, entre 0 et 1\"\"\"\n  normalizedValue: Float\n\n  \"\"\"Question à laquelle la réponse est associée\"\"\"\n  question: QuestionScale!\n\n  \"\"\"Section du formulaire auquel appartient la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Date de dernière mise à jour de la réponse\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"Réponse donnée\"\"\"\n  value: Int\n}\n\ntype AnswerSearchResult {\n  answer: Answer!\n  id: ID!\n  rank: Float\n  similarity: Float!\n}\n\n\"\"\"\nRéponse de type `SelectMultiple` (voir [`QuestionKind`](#QuestionKind))\n\"\"\"\ntype AnswerSelectMultiple implements Answer {\n  answerString: String!\n\n  \"\"\"Réservation associée à la réponse\"\"\"\n  booking: Registration\n  checkboxIsMarked: Boolean\n\n  \"\"\"Date de création de la réponse\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Utilisateur ayant répondu à la question\"\"\"\n  createdBy: User\n\n  \"\"\"Formulaire auquel appartient la question\"\"\"\n  form: Form!\n\n  \"\"\"Préfixe de l'identifiant: `answer:`\"\"\"\n  id: ID!\n\n  \"\"\"Question à laquelle la réponse est associée\"\"\"\n  question: QuestionSelectMultiple!\n\n  \"\"\"Section du formulaire auquel appartient la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Date de dernière mise à jour de la réponse\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"Réponse donnée\"\"\"\n  value: [String!]\n}\n\n\"\"\"Réponse de type `SelectOne` (voir [`QuestionKind`](#QuestionKind))\"\"\"\ntype AnswerSelectOne implements Answer {\n  answerString: String!\n\n  \"\"\"Réservation associée à la réponse\"\"\"\n  booking: Registration\n  checkboxIsMarked: Boolean\n\n  \"\"\"Date de création de la réponse\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Utilisateur ayant répondu à la question\"\"\"\n  createdBy: User\n\n  \"\"\"Formulaire auquel appartient la question\"\"\"\n  form: Form!\n\n  \"\"\"Préfixe de l'identifiant: `answer:`\"\"\"\n  id: ID!\n\n  \"\"\"Question à laquelle la réponse est associée\"\"\"\n  question: QuestionSelectOne!\n\n  \"\"\"Section du formulaire auquel appartient la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Date de dernière mise à jour de la réponse\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"Réponse donnée\"\"\"\n  value: String\n}\n\n\"\"\"Réponse de type `Text` (voir [`QuestionKind`](#QuestionKind))\"\"\"\ntype AnswerText implements Answer {\n  answerString: String!\n\n  \"\"\"Réservation associée à la réponse\"\"\"\n  booking: Registration\n  checkboxIsMarked: Boolean\n\n  \"\"\"Date de création de la réponse\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Utilisateur ayant répondu à la question\"\"\"\n  createdBy: User\n\n  \"\"\"Formulaire auquel appartient la question\"\"\"\n  form: Form!\n\n  \"\"\"Préfixe de l'identifiant: `answer:`\"\"\"\n  id: ID!\n\n  \"\"\"Question à laquelle la réponse est associée\"\"\"\n  question: QuestionScalar!\n\n  \"\"\"Section du formulaire auquel appartient la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Date de dernière mise à jour de la réponse\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"Réponse donnée\"\"\"\n  value: String\n}\n\n\"\"\"Réponse de type `Time` (voir [`QuestionKind`](#QuestionKind))\"\"\"\ntype AnswerTime implements Answer {\n  answer: Answer!\n  answerString: String!\n\n  \"\"\"Réservation associée à la réponse\"\"\"\n  booking: Registration\n  checkboxIsMarked: Boolean\n\n  \"\"\"Date de création de la réponse\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Utilisateur ayant répondu à la question\"\"\"\n  createdBy: User\n\n  \"\"\"Formulaire auquel appartient la question\"\"\"\n  form: Form!\n\n  \"\"\"Préfixe de l'identifiant: `answer:`\"\"\"\n  id: ID!\n\n  \"\"\"Question à laquelle la réponse est associée\"\"\"\n  question: QuestionScalar!\n\n  \"\"\"Réponse donnée, brute (sous forme de texte)\"\"\"\n  rawValue: String\n\n  \"\"\"Section du formulaire auquel appartient la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Date de dernière mise à jour de la réponse\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"Réponse donnée\"\"\"\n  value: DateTime\n}\n\n\"\"\"Formats d'export des réponses\"\"\"\nenum AnswersExportFormats {\n  \"\"\"\n  Format CSV (séparateur de colonnes: virgule, séparateur de lignes: saut de ligne)\n  \"\"\"\n  CSV\n\n  \"\"\"\n  Format TSV (séparateur de colonnes: tabulation, séparateur de lignes: saut de ligne)\n  \"\"\"\n  TSV\n}\n\n\"\"\"\nReprésente toutes les réponses d'un·e utilisateur·ice à un formulaire. Pratique pour grouper les réponses afin de les afficher dans un tableau\n\"\"\"\ntype AnswersOfUser {\n  answers: [Answer!]!\n\n  \"\"\"Correspond à la date de dernière réponse parmis les réponses\"\"\"\n  date: DateTime!\n  user: User!\n}\n\n\"\"\"\nDes données temporelles pour construire des graphiques d'atteintes de rate limiting. La résolution temporelle est d'une minute.\n\"\"\"\ntype ApiRateLimitHits {\n  \"\"\"Le nombre d'erreurs de rate-limiting à cette date\"\"\"\n  count: Int!\n\n  \"\"\"La date à laquelle les requêtes ont été faites\"\"\"\n  date: DateTime!\n\n  \"\"\"Le nom de la query ou mutation ou subscription\"\"\"\n  queryName: String!\n\n  \"\"\"Le type de requête effectuée\"\"\"\n  queryType: String!\n  timestamp: Int!\n  user: User\n}\n\n\"\"\"\nDes données temporelles pour construire des graphiques d'utilisation de l'API au cours du temps. La résolution temporelle est d'une minute.\n\"\"\"\ntype ApiUsage {\n  \"\"\"Le nombre de requêtes faites à cette date\"\"\"\n  count: Int!\n\n  \"\"\"La date à laquelle les requêtes ont été faites\"\"\"\n  date: DateTime!\n\n  \"\"\"Le nom de la query ou mutation ou subscription\"\"\"\n  queryName: String!\n\n  \"\"\"Le type de requête effectuée\"\"\"\n  queryType: ApiUsageQueryType!\n  timestamp: Int!\n  user: User\n}\n\n\"\"\"Type de requête effectuée sur l'API\"\"\"\nenum ApiUsageQueryType {\n  \"\"\"Modification de données, ou autre action diverses\"\"\"\n  Mutation\n\n  \"\"\"Récupération de données\"\"\"\n  Query\n\n  \"\"\"\n  Abonnement à des données pour être informé en temps réel des changements\n  \"\"\"\n  Subscription\n}\n\n\"\"\"An article is a post in a group\"\"\"\ntype Article implements Commentable & Node & Pictured & Reactable {\n  author: User\n  authorId: ID\n  body: String!\n  bodyHtml: String!\n  bodyPreview: String!\n\n  \"\"\"\n  Vrai si l'utilisateur·ice connecté·e peut éditer le post (en considérant qu'iel ne va pas changer l'auteur·ice ou le groupe du post)\n  \"\"\"\n  canBeEdited: Boolean!\n  comments(after: String, before: String, first: Int, last: Int): CommentsConnection!\n  createdAt: DateTime!\n  event: Event\n  eventId: ID\n  group: Group!\n  groupId: ID!\n  id: ID!\n  links: [Link!]!\n  myReactions: BooleanMap!\n  notifiedAt: DateTime\n  pictureFile: String!\n\n  \"\"\"Le nom du fichier de l'image, en thème sombre\"\"\"\n  pictureFileDark: String!\n\n  \"\"\"L'URL publique de l'image\"\"\"\n  pictureURL(\n    \"\"\"Utiliser l'image en thème sombre\"\"\"\n    dark: Boolean! = false\n  ): String!\n  published: Boolean!\n  publishedAt: DateTime!\n  reacted(emoji: String!): Boolean!\n  reactionCounts: Counts!\n  reactions(emoji: String!): Int!\n\n  \"\"\"Un nom lisible sans espaces, adaptés pour des URLs.\"\"\"\n  slug: String!\n  title: String!\n  uid: String! @deprecated(reason: \"Use `slug` instead. This field was never universally unique.\")\n  visibility: Visibility!\n}\n\ntype ArticleSearchResultType {\n  article: Article!\n  highlightedTitle: String!\n  id: ID!\n  rank: Float\n  similarity: Float!\n}\n\ntype AwaitingValidationError {\n  message: String!\n}\n\n\"\"\"A bar week is a week during which some groups takeover the bar staff\"\"\"\ntype BarWeek implements Node {\n  description: String!\n  descriptionHtml: String!\n  endsAt: DateTime!\n  groups: [Group!]!\n  id: ID!\n\n  \"\"\"Un nom lisible sans espaces, adaptés pour des URLs.\"\"\"\n  slug: String!\n  startsAt: DateTime!\n  uid: String! @deprecated(reason: \"Use `slug` instead. This field was never universally unique.\")\n}\n\nscalar BooleanMap\n\ntype BuildInfo {\n  \"\"\"Le hash du commit utilisé pour build l'API\"\"\"\n  commit: String!\n\n  \"\"\"La version actuelle de l'API (et de l'application)\"\"\"\n  version: String!\n}\n\n\"\"\"A release in the changelog\"\"\"\ntype ChangelogRelease {\n  \"\"\"The changes of the release, grouped by category\"\"\"\n  changes: ReleaseChangesMaps!\n\n  \"\"\"The date of the release\"\"\"\n  date: DateTime\n\n  \"\"\"A short description of the release\"\"\"\n  description: String!\n\n  \"\"\"A short description of the release, in HTML. Safe from XSS.\"\"\"\n  descriptionHtml: String!\n\n  \"\"\"The version of the release\"\"\"\n  version: String!\n}\n\ntype Comment implements Node & Reactable {\n  author: User\n  authorId: ID\n  body: String!\n  bodyHtml: String!\n  createdAt: DateTime!\n  document: Document\n  documentId: ID\n  id: ID!\n  inReplyTo: Comment\n  inReplyToId: ID\n  reacted(emoji: String!): Boolean!\n  reactions(emoji: String!): Int!\n  replies: [Comment!]!\n  updatedAt: DateTime!\n}\n\n\"\"\"Une resource pouvant être commentée par les utilisateur·ice·s\"\"\"\ninterface Commentable {\n  comments(after: String, before: String, first: Int, last: Int): CommentsConnection!\n\n  \"\"\"L’identifiant de la resource commentée\"\"\"\n  id: ID!\n}\n\ntype CommentsConnection {\n  edges: [CommentsEdge!]!\n  nodes: [Comment!]!\n  pageInfo: PageInfo!\n}\n\ntype CommentsEdge {\n  cursor: String!\n  node: Comment!\n}\n\nunion CompleteSignupResult = User | UserCandidate\n\ntype ContributionOption {\n  descriptionHtml: String!\n  id: ID!\n  name: String!\n  offeredIn: School!\n  paysFor: [StudentAssociation!]!\n  price: Float!\n}\n\nscalar Counts\n\n\"\"\"A credential is a way to authenticate a user\"\"\"\ntype Credential {\n  active: Boolean!\n  createdAt: DateTime!\n  expiresAt: DateTime\n  id: ID!\n  name: String!\n  token: String!\n  type: CredentialType!\n  user: User!\n  userAgent: String!\n}\n\nenum CredentialType {\n  Google\n  Password\n  Token\n}\n\ntype DatabaseHealthCheck {\n  prisma: Boolean!\n}\n\n\"\"\"\nA date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.\n\"\"\"\nscalar DateTime\n\ntype Document implements Commentable & Node & Reactable {\n  comments(after: String, before: String, first: Int, last: Int): CommentsConnection!\n  createdAt: DateTime!\n  description: String!\n  descriptionHtml: String!\n  id: ID!\n\n  \"\"\"\n  Liste de chemins vers les fichiers représentant le sujet (ou la fiche de révision)\n  \"\"\"\n  paperPaths: [String!]!\n  reacted(emoji: String!): Boolean!\n  reactions(emoji: String!): Int!\n  schoolYear: Int!\n\n  \"\"\"Un nom lisible sans espaces, adaptés pour des URLs.\"\"\"\n  slug: String!\n\n  \"\"\"Liste de chemins vers les fichiers représentant la correction.\"\"\"\n  solutionPaths: [String!]!\n  subject: Subject\n  subjectId: ID\n  title: String!\n  type: DocumentType!\n  uid: String! @deprecated(reason: \"Use `slug` instead. This field was never universally unique.\")\n  updatedAt: DateTime!\n  uploader: User\n  uploaderId: ID\n}\n\ntype DocumentSearchResult {\n  document: Document!\n  id: ID!\n  rank: Int\n  similarity: Float!\n}\n\nenum DocumentType {\n  CourseNotes\n  CourseSlides\n  Exam\n  Exercises\n  GradedExercises\n  Miscellaneous\n  Practical\n  PracticalExam\n  Summary\n}\n\n\"\"\"A email validation request\"\"\"\ntype EmailChange {\n  createdAt: DateTime!\n  email: String!\n  id: ID!\n  pending: Boolean!\n  updatedAt: DateTime!\n  user: User!\n  userId: ID!\n}\n\n\"\"\"\nThe most basic error object, based on the base JavaScript Error object.\n\"\"\"\ntype Error implements ErrorInterface {\n  message: String!\n}\n\n\"\"\"Basic interface for all error types to implement.\"\"\"\ninterface ErrorInterface {\n  message: String!\n}\n\ntype EvenSearchResult {\n  event: Event!\n  highlightedTitle: String!\n  id: ID!\n  rank: Float\n  similarity: Float!\n}\n\n\"\"\"An event is a date, time and place, as well as an optional ticket\"\"\"\ntype Event implements Node & Pictured & Reactable {\n  articles: [Article!]!\n  author: User\n  authorId: ID\n  bannedUsers: [User!]!\n  beneficiary: LydiaAccount\n  bookings(after: String, before: String, first: Int, last: Int): EventBookingsConnection!\n  bookingsCounts: RegistrationsCounts!\n\n  \"\"\"\n  Renvoie un texte au format CSV contenant un export des réservations de l'évènement.\n  \"\"\"\n  bookingsCsv: EventBookingsCsvResult!\n\n  \"\"\"L'utilisateur·ice connecté·e peut modifier cet évènement\"\"\"\n  canEdit: Boolean!\n\n  \"\"\"\n  L'utilisateur·ice connecté·e peut ajouter, enlever ou modifier les droits des managers de cet évènement\n  \"\"\"\n  canEditManagers: Boolean!\n\n  \"\"\"\n  L'utilisateur·ice connecté·e peut scanner les réservations de cet évènement\n  \"\"\"\n  canSeeBookings: Boolean!\n\n  \"\"\"L'utilsateur·ice connecté·e peut voir les logs de cet évènement\"\"\"\n  canSeeLogs: Boolean!\n  capacity: Int!\n  coOrganizers: [Group!]!\n  contactMail: String!\n  description: String!\n  descriptionHtml: String!\n  descriptionPreview: String!\n  endsAt: DateTime!\n\n  \"\"\"Formulaires associés à l'événement\"\"\"\n  forms: [Form!]!\n  frequency: EventFrequency!\n  group: Group!\n  groupId: ID!\n  id: ID!\n\n  \"\"\"Vrai si l'évènement doit apparaître dans le mode kiosque\"\"\"\n  includeInKiosk: Boolean!\n  links: [Link!]!\n  location: String!\n\n  \"\"\"\n  Logs concernant cet évènement. Ne contient pas les logs concernant les réservations.\n  \"\"\"\n  logs(after: String, before: String, first: Int, last: Int): EventLogsConnection!\n  lydiaAccountId: ID\n  managers: [EventManager!]!\n\n  \"\"\"Réservations faites par et/ou pour l'utilisateur.ice connecté.e\"\"\"\n  myBookings: EventMyBookingsResult!\n  myReactions: BooleanMap!\n  mySoonestShotgunOpensAt: DateTime\n  pictureFile: String!\n\n  \"\"\"Le nom du fichier de l'image, en thème sombre\"\"\"\n  pictureFileDark: String!\n\n  \"\"\"L'URL publique de l'image\"\"\"\n  pictureURL(\n    \"\"\"Utiliser l'image en thème sombre\"\"\"\n    dark: Boolean! = false\n  ): String!\n  placesLeft: Int\n  profitsBreakdown: ProfitsBreakdown!\n  reacted(emoji: String!): Boolean!\n  reactionCounts: Counts!\n  reactions(emoji: String!): Int!\n  recurringUntil: DateTime\n  searchBookings(q: String!): [RegistrationSearchResult!]!\n\n  \"\"\"Vrai si le nombre de places restantes doit être affiché\"\"\"\n  showPlacesLeft: Boolean!\n\n  \"\"\"Un nom lisible sans espaces, adaptés pour des URLs.\"\"\"\n  slug: String!\n  startsAt: DateTime!\n  ticket(id: ID, slug: String): Ticket!\n  ticketGroups: [TicketGroup!]!\n  tickets: [Ticket!]!\n  title: String!\n  uid: String! @deprecated(reason: \"Use `slug` instead. This field was never universally unique.\")\n  visibility: Visibility!\n}\n\ntype EventBookingsConnection {\n  edges: [EventBookingsConnectionEdge!]!\n  nodes: [Registration!]!\n  pageInfo: PageInfo!\n}\n\ntype EventBookingsConnectionEdge {\n  cursor: String!\n  node: Registration!\n}\n\nunion EventBookingsCsvResult = Error | EventBookingsCsvSuccess\n\ntype EventBookingsCsvSuccess {\n  data: String!\n}\n\nenum EventFrequency {\n  Biweekly\n  Monthly\n  Once\n  Weekly\n}\n\ntype EventLogsConnection {\n  edges: [EventLogsConnectionEdge!]!\n  nodes: [LogEntry!]!\n  pageInfo: PageInfo!\n}\n\ntype EventLogsConnectionEdge {\n  cursor: String!\n  node: LogEntry!\n}\n\n\"\"\"\nAn event manager is a user that can scan tickets, and may be able to manage the event\n\"\"\"\ntype EventManager {\n  canEdit: Boolean!\n  canEditPermissions: Boolean!\n  canVerifyRegistrations: Boolean!\n  event: Event!\n  power: EventManagerPowerLevel!\n  user: User!\n}\n\nenum EventManagerPowerLevel {\n  Edit\n  EditPermissions\n  ReadOnly\n  ScanTickets\n}\n\nunion EventMyBookingsResult = Error | EventMyBookingsSuccess\n\ntype EventMyBookingsSuccess {\n  data: [Registration!]!\n}\n\ntype EventsByDay {\n  date: DateTime!\n\n  \"\"\"Évènements qui ont lieu (commencent) à ce jour\"\"\"\n  happening: [Event!]!\n\n  \"\"\"Évènements qui ont leur premier shotgun à ce jour\"\"\"\n  shotgunning: [Event!]!\n}\n\ntype FamilyTree {\n  nesting: String!\n  users: [User!]!\n}\n\nscalar File\n\n\"\"\"Un formulaire\"\"\"\ntype Form implements Node {\n  \"\"\"Nombre de réponses au formulaire\"\"\"\n  answerCount: Int!\n\n  \"\"\"Réponses au formulaire\"\"\"\n  answers(after: String, before: String, first: Int, last: Int): FormAnswersConnection!\n\n  \"\"\"\n  Réponses au formulaire, groupées par utilisateur·ice. Ne contient pas de réponses dont l'utilisateur·ice est inconnu·e.\n  \"\"\"\n  answersByUser(\n    after: String\n    before: String\n    first: Int\n    last: Int\n\n    \"\"\"Recherche par utilisateur·ice\"\"\"\n    q: String\n  ): FormAnswersByUserConnection!\n\n  \"\"\"Export des réponses au formulaires dans un format\"\"\"\n  answersExport(\n    \"\"\"Format à utiliser\"\"\"\n    format: AnswersExportFormats! = CSV\n  ): String!\n\n  \"\"\"Indique si l'utilisateur peut répondre au formulaire.\"\"\"\n  canAnswer: Boolean!\n\n  \"\"\"Indique si l'utilisateur peut éditer le formulaire.\"\"\"\n  canEdit: Boolean!\n\n  \"\"\"Indique si l'utilisateur·ice peut modifier ses réponses au formulaire.\"\"\"\n  canModifyAnswers: Boolean!\n\n  \"\"\"\n  Indique si l'utilisateur peut voir les statistiques des réponses au formulaire.\n  \"\"\"\n  canSeeAnswerStats: Boolean!\n\n  \"\"\"Indique si l'utilisateur peut voir les réponses au formulaire.\"\"\"\n  canSeeAnswers: Boolean!\n\n  \"\"\"\n  Indique si l'utilisateur peut cocher ou décocher les cases à cocher à côté des réponses au formulaire.\n  \"\"\"\n  canSetCheckboxes: Boolean!\n  checkboxesAreEnabled: Boolean!\n\n  \"\"\"Date de fermeture du formulaire.\"\"\"\n  closesAt: DateTime\n\n  \"\"\"Date de création du formulaire\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Utilisateur ayant créé le formulaire\"\"\"\n  createdBy: User\n\n  \"\"\"Description en Markdown du formulaire.\"\"\"\n  description: String\n\n  \"\"\"Description en HTML du formulaire.\"\"\"\n  descriptionHtml: String!\n\n  \"\"\"Événement associé au formulaire\"\"\"\n  event: Event\n\n  \"\"\"Groupe auquel le formulaire est associé\"\"\"\n  group: Group\n\n  \"\"\"Vrai si le formulaire comporte des sections\"\"\"\n  hasSections: Boolean!\n\n  \"\"\"Préfixe de l'identifiant: `form:`\"\"\"\n  id: ID!\n\n  \"\"\"\n  L'URL du Google Sheet des réponses lié à ce formulaire. Voir `createLinkedGoogleSheet` pour créer un Google Sheet lié au formulaire.\n  \"\"\"\n  linkedGoogleSheetUrl: String\n\n  \"\"\"Identifiant local du formulaire\"\"\"\n  localId: String!\n\n  \"\"\"Réponses de l'utilisateur·ice connecté·e à ce formulaire\"\"\"\n  myAnswers: [Answer!]!\n\n  \"\"\"Date d'ouverture du formulaire.\"\"\"\n  opensAt: DateTime\n\n  \"\"\"\n  Questions du formulaire. Liste de toutes les questions, peut importe la section dans laquelle elles se trouvent.\n  \"\"\"\n  questions(after: String, before: String, first: Int, last: Int): FormQuestionsConnection!\n  searchAnswers(\n    \"\"\"La recherche\"\"\"\n    q: String!\n    similarityCutoff: Float\n  ): [AnswerSearchResult!]!\n\n  \"\"\"Une section du formulaire.\"\"\"\n  section(\n    \"\"\"Identifiant (local ou global) de la section\"\"\"\n    id: String\n  ): FormSection!\n\n  \"\"\"\n  Sections du formulaire. Un formulaire contient toujours au moins une section (sauf s'il n'y a aucune question). Uniquement accessible par celleux qui peuvent modifier le formulaire. Utiliser `nextSection` pour afficher une section dans le but d'y répondre.\n  \"\"\"\n  sections: [FormSection!]!\n  title: String!\n\n  \"\"\"Date de dernière mise à jour du formulaire\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"Visibilité du formulaire\"\"\"\n  visibility: Visibility!\n}\n\ntype FormAnswersByUserConnection {\n  edges: [FormAnswersByUserConnectionEdge!]!\n  nodes: [AnswersOfUser!]!\n  pageInfo: PageInfo!\n}\n\ntype FormAnswersByUserConnectionEdge {\n  cursor: String!\n  node: AnswersOfUser!\n}\n\ntype FormAnswersConnection {\n  edges: [FormAnswersConnectionEdge!]!\n  nodes: [Answer!]!\n  pageInfo: PageInfo!\n}\n\ntype FormAnswersConnectionEdge {\n  cursor: String!\n  node: Answer!\n}\n\ntype FormQuestionsConnection {\n  edges: [FormQuestionsConnectionEdge!]!\n  nodes: [Question!]!\n  pageInfo: PageInfo!\n}\n\ntype FormQuestionsConnectionEdge {\n  cursor: String!\n  node: Question!\n}\n\ntype FormSearchResult {\n  form: Form!\n  highlightedDescription: String!\n  id: ID!\n  rank: Float\n  similarity: Float!\n}\n\n\"\"\"\nUne section d'un formulaire. Les sections sont utiles pour séparer les questions en plusieurs parties, dont certaines peuvent être affichées selon des réponses à des questions précédentes\n\"\"\"\ntype FormSection {\n  \"\"\"Réponses à cette section\"\"\"\n  answers(after: String, before: String, first: Int, last: Int): FormSectionAnswersConnection!\n\n  \"\"\"Description en Markdown de la section\"\"\"\n  description: String!\n\n  \"\"\"Description en HTML de la section\"\"\"\n  descriptionHtml: String!\n\n  \"\"\"Formulaire auquel appartient la section\"\"\"\n  form: Form!\n  id: ID!\n\n  \"\"\"Identifiant local de la section du formulaire\"\"\"\n  localId: String!\n\n  \"\"\"\n  Section suivante dans le formulaire, si il y en a une. (Sinon, c'est que c'est la dernière section). Dépend du fait que des sections soit cachées à l'utilisateur (voir `restrictedToGroups`), ou que une répond à une question provoque le passaage à une autre section (voir `goToSection`) \n  \"\"\"\n  nextSection: FormSection\n\n  \"\"\"Ordre de la section dans le formulaire\"\"\"\n  order: Int!\n\n  \"\"\"Questions dans section\"\"\"\n  questions: [Question!]!\n\n  \"\"\"\n  Si non vide, seul·e·s les membres des groupes spécifiés peuvent accéder à cette section. \n  \"\"\"\n  restrictedToGroups: [Group!]!\n\n  \"\"\"Titre de la section\"\"\"\n  title: String!\n}\n\ntype FormSectionAnswersConnection {\n  edges: [FormSectionAnswersConnectionEdge!]!\n  nodes: [Answer!]!\n  pageInfo: PageInfo!\n}\n\ntype FormSectionAnswersConnectionEdge {\n  cursor: String!\n  node: Answer!\n}\n\n\"\"\"\nRequests to become someone's godchild. Gets deleted once the request has been accepted (or denied). godchild is the requester, godparent is the requested.\n\"\"\"\ntype GodparentRequest {\n  createdAt: DateTime!\n  godchild: User!\n  godparent: User!\n  id: ID!\n  updatedAt: DateTime!\n}\n\n\"\"\"A group is a collection of users\"\"\"\ntype Group implements Node & Pictured {\n  address: String!\n\n  \"\"\"All the ancestors of this group, from the current group to the root.\"\"\"\n  ancestors: [Group!]!\n  articles: [Article!]!\n  boardMembers: [GroupMember!]!\n\n  \"\"\"\n  Vrai si l'utilisateur·ice connecté·e peut modifier les informations du groupe\n  \"\"\"\n  canEditDetails: Boolean!\n\n  \"\"\"\n  L'utilisateur·ice connecté·e peut éditer (créer ou modifier) les pages du groupe\n  \"\"\"\n  canEditPages: Boolean!\n\n  \"\"\"L'utilisateur·ice connecté·e peut lister les pages du groupe\"\"\"\n  canListPages: Boolean!\n  children: [Group!]!\n  coOrganizedEvents: [Event!]!\n  color: String!\n  description: String!\n  email: String!\n  events(after: String, before: String, first: Int, last: Int): GroupEventsConnection!\n  familyChildren: [Group!]!\n\n  \"\"\"\n  Helper field to get a whole tree without processing all groups\\nTo be set to the group's id itself for root groups.\n  \"\"\"\n  familyId: ID\n\n  \"\"\"Formulaires associés au groupe\"\"\"\n  forms: [Form!]!\n  groupId: ID!\n  id: ID!\n  ldapUid: String!\n  links: [Link!]!\n  longDescription: String!\n  longDescriptionHtml: String!\n  mailingList: String!\n  members: [GroupMember!]!\n  name: String!\n  ownEvents: [Event!]!\n\n  \"\"\"La page associée au groupe\"\"\"\n  page(\n    \"\"\"\n    Le chemin de la page. Ce n'est pas le chemin complet, mais celui qui est local au groupe. Voir `Page` pour plus d'informations.\n    \"\"\"\n    path: String!\n  ): Page\n\n  \"\"\"Les pages associées au groupe\"\"\"\n  pages(after: String, before: String, first: Int, last: Int): PagesConnection!\n\n  \"\"\"Parent group, from which this group inherits its permissions\"\"\"\n  parent: Group\n  parentId: ID\n  pictureFile: String!\n  pictureFileDark: String!\n\n  \"\"\"L'URL publique de l'image\"\"\"\n  pictureURL(\n    \"\"\"Utiliser l'image en thème sombre\"\"\"\n    dark: Boolean! = false\n  ): String!\n  president: GroupMember\n\n  \"\"\"Related clubs\"\"\"\n  related: [Group!]!\n  roomIsOpen: Boolean!\n\n  \"\"\"Family root, only created for performance reasons\"\"\"\n  root: Group\n  secretaries: [GroupMember!]!\n  selfJoinable: Boolean!\n  services: [Service!]!\n  shopItems(after: String, before: String, first: Int, last: Int): GroupShopItemsConnection!\n  shopOrders: [ShopPayment!]!\n  studentAssociation: StudentAssociation\n  treasurers: [GroupMember!]!\n  type: GroupType!\n  uid: String!\n  vicePresidents: [GroupMember!]!\n  website: String!\n}\n\ntype GroupEventsConnection {\n  edges: [GroupEventsConnectionEdge!]!\n  nodes: [Event!]!\n  pageInfo: PageInfo!\n}\n\ntype GroupEventsConnectionEdge {\n  cursor: String!\n  node: Event!\n}\n\n\"\"\"The intermediate model between users and groups\"\"\"\ntype GroupMember {\n  canEditArticles: Boolean!\n  canEditMembers: Boolean!\n  canScanEvents: Boolean!\n  createdAt: DateTime!\n  group: Group!\n  groupId: ID!\n  isDeveloper: Boolean!\n  member: User!\n  memberId: ID!\n  president: Boolean!\n  secretary: Boolean!\n  title: String!\n  treasurer: Boolean!\n  vicePresident: Boolean!\n}\n\ntype GroupSearchResult {\n  group: Group!\n  highlightedDescription: String!\n  id: ID!\n  rank: Float\n  similarity: Float!\n}\n\ntype GroupShopItemsConnection {\n  edges: [GroupShopItemsConnectionEdge!]!\n  nodes: [ShopItem!]!\n  pageInfo: PageInfo!\n}\n\ntype GroupShopItemsConnectionEdge {\n  cursor: String!\n  node: ShopItem!\n}\n\nenum GroupType {\n  Association\n  Club\n  Group\n  Integration\n  List\n  StudentAssociationSection\n}\n\n\"\"\"Results of a health self-check\"\"\"\ntype HealthCheck {\n  database: DatabaseHealthCheck!\n  ldap: LdapHealthCheck!\n  mail: MailHealthCheck!\n  redis: RedisHealthCheck!\n}\n\n\"\"\"A Gitlab issue\"\"\"\ntype Issue {\n  body: String!\n  bodyHtml: String!\n  comments: [IssueComment!]!\n  deployedIn: String!\n\n  \"\"\"Expressed from 0 to 1\"\"\"\n  difficulty: Float\n  duplicatedFrom: Int\n\n  \"\"\"Expressed from 0 to 1\"\"\"\n  importance: Float\n  number: Int!\n  state: IssueState!\n\n  \"\"\"The date at which the issue was submitted\"\"\"\n  submittedAt: DateTime!\n  title: String!\n  url: String!\n}\n\n\"\"\"A Gitlab issue comment\"\"\"\ntype IssueComment {\n  \"\"\"The date at which the comment was added\"\"\"\n  addedAt: DateTime!\n  authorAvatarUrl: String!\n  authorGitlabUrl: String!\n  authorName: String!\n  body: String!\n  bodyHtml: String!\n}\n\nenum IssueState {\n  Closed\n  Deployed\n  Open\n}\n\ntype LdapHealthCheck {\n  \"\"\"Whether the LDAP internal client is ready\"\"\"\n  internal: Boolean!\n\n  \"\"\"Whether the LDAP school client is ready\"\"\"\n  school: Boolean!\n}\n\n\"\"\"A single external link\"\"\"\ntype Link implements Node {\n  computedValue: String!\n  createdAt: DateTime!\n  id: ID!\n  name: String!\n  value: String!\n}\n\ninput LinkInput {\n  name: String!\n  value: String!\n}\n\n\"\"\"A log entry is a log of an action that happened on the website\"\"\"\ntype LogEntry implements Node {\n  action: String!\n  area: String!\n  happenedAt: DateTime!\n  id: ID!\n  message: String!\n  target: String\n  user: User\n}\n\nenum LogoSourceType {\n  ExternalLink\n  GroupLogo\n  Icon\n  InternalLink\n}\n\n\"\"\"A Lydia account\"\"\"\ntype LydiaAccount {\n  events: [Event!]!\n  group: Group\n  groupId: ID\n  id: ID!\n  name: String!\n  studentAssociation: StudentAssociation\n  studentAssociationId: ID\n}\n\ntype MailHealthCheck {\n  \"\"\"Whether the SMTP client is ready\"\"\"\n  smtp: Boolean!\n}\n\n\"\"\"A school syllabus\"\"\"\ntype Major {\n  id: ID!\n  ldapSchool: School\n  minors: [Minor!]!\n  name: String!\n  schools: [School!]!\n  shortName: String!\n  subjects(forApprentices: Boolean, yearTier: Int): [Subject!]!\n  uid: String!\n}\n\ninput ManagerOfEventInput {\n  canEdit: Boolean!\n  canEditPermissions: Boolean!\n  canVerifyRegistrations: Boolean!\n  userUid: String!\n}\n\ntype Minor implements Node {\n  id: ID!\n  majors: [Major!]!\n  name: String!\n  shortName: String!\n\n  \"\"\"Un nom lisible sans espaces, adaptés pour des URLs.\"\"\"\n  slug: String!\n  subjects: [Subject!]!\n  uid: String! @deprecated(reason: \"Use `slug` instead. This field was never universally unique.\")\n  users: [User!]!\n  yearTier: Int!\n}\n\n\"\"\"- **Rate limit:** 1200 / 10 minutes\"\"\"\ntype Mutation {\n  acceptRegistration(email: String!): MutationAcceptRegistrationResult!\n\n  \"\"\"Marks the user as having seen the given version's changelog.\"\"\"\n  acknowledgeChangelog(version: String! = \"dev\"): Boolean!\n\n  \"\"\"Activate a third-party app. Only admins can do this.\"\"\"\n  activateApp(\n    \"\"\"The app's ID\"\"\"\n    id: ID!\n  ): Boolean!\n\n  \"\"\"\n  Ajouter un fichier à une page. Permet notamment d'ajouter des images pour s'en servir dans le contenu de la page.\n  \"\"\"\n  addFileToPage(file: File!, page: ID!): MutationAddFileToPageResult!\n  addGroupMember(groupUid: String!, title: String!, uid: String!): MutationAddGroupMemberResult!\n\n  \"\"\"Répondre à une question de type `FileUpload` en uploadant un fichier\"\"\"\n  answerFileQuestion(\n    \"\"\"Fichier à uploader\"\"\"\n    answer: File!\n\n    \"\"\"ID de la question à laquelle répondre\"\"\"\n    question: ID!\n  ): AnswerFileUpload!\n  answerFormSection(\n    answers: [AnswerInput!]!\n\n    \"\"\"ID de la section du formulaire\"\"\"\n    section: ID!\n  ): MutationAnswerFormSectionResult!\n\n  \"\"\"\n  Authorize a third-party client to access the user's data. \n  Returns an access code. \n  \n  Use the frontend's /authorize endpoint instead of this, as it requires already being logged-in.\n  \n  Do a `GET` request to `http://localhost:5173/authorize?client_id=<clientId>&redirect_uri=<redirectUri>&response_type=code&state=<state>` with:\n  \n  - `<clientId>`: The client ID of the app. See registerApp to get this.\n  - `<redirectUri>`: The URL that you want to redirect the user to. The frontend uses this on /authorize to redirect users to `<redirectUri>?code=<return value of this mutation>`\n  - `<state>`: A random string generated from personal information used to prevent CSRF attacks.\n  \n  Use that code to get an access token with /token:\n  \n  Do a `POST` request to `http://localhost:5173/token` with a `application/x-www-form-urlencoded` body with the following fields:\n  \n  - `grant_type`: `authorization_code`\n  - `code`: The code returned by this endpoint\n  - `client_id`: The client ID of the app\n  - `client_secret`: The client secret of the app\n  - `redirect_uri`: The redirect URI used in this request\n  \"\"\"\n  authorize(\n    \"\"\"The client ID of the app. See registerApp to get this.\"\"\"\n    clientId: String!\n\n    \"\"\"\n    The URL that you want to redirect the user to. The frontend uses this on /authorize to redirect users to `<redirectUri>?code=<return value of this mutation>`\n    \"\"\"\n    redirectUri: String!\n  ): MutationAuthorizeResult!\n  cancelPendingContribution(optionId: ID!): Boolean!\n  cancelRegistration(id: ID!): MutationCancelRegistrationResult!\n  checkIfRegistrationIsPaid(id: ID!): Boolean!\n  claimPromotionCode(code: String!): Boolean!\n  completeRegistration(address: String!, apprentice: Boolean!, birthday: DateTime, cededImageRightsToTVn7: Boolean!, firstName: String!, graduationYear: Int!, lastName: String!, majorId: ID, password: String!, passwordConfirmation: String!, phone: String!, token: String!, uid: UID!): MutationCompleteRegistrationResult!\n  contribute(optionId: ID!, phone: String!): MutationContributeResult!\n  createBot(\n    \"\"\"UID de la filière\"\"\"\n    major: String\n\n    \"\"\"Nom du compte bot\"\"\"\n    name: String!\n\n    \"\"\"Mot de passe du compte bot\"\"\"\n    password: String!\n\n    \"\"\"UID du compte bot\"\"\"\n    uid: String!\n  ): User!\n  createGitlabIssue(description: String!, isBug: Boolean!, title: String!): Int!\n\n  \"\"\"\n  Créer un pass Google Wallet pour une réservation donnée. Renvoie l'URL a utiliser pour ajouter le pass à Google Wallet.\n  \"\"\"\n  createGoogleWalletPass(\n    \"\"\"Code de la réservation\"\"\"\n    code: String!\n  ): String!\n\n  \"\"\"\n  Crée une feuille Google Sheets (si elle n'existe pas déjà) qui contiendra les réponses au formulaire (et sera mise à jour automatiquement). Renvoie l'URL de la feuille Google Sheets.\n  \"\"\"\n  createLinkedGoogleSheet(\n    \"\"\"L'identifiant du formulaire\"\"\"\n    form: ID!\n  ): String!\n\n  \"\"\"\n  Démarre une procédure de réinitialisation de mot de passe pour l'utilisateur associé à l'adresse e-mail ou l'uid fournie. Renvoie `true` même si l'utilisateur n'existe pas.\n  \"\"\"\n  createPasswordReset(email: String!): MutationCreatePasswordResetResult!\n\n  \"\"\"Créer un lien d'inscription rapide\"\"\"\n  createQuickSignup(\n    \"\"\"UID de l'école\"\"\"\n    school: String!\n\n    \"\"\"Date de validité du lien\"\"\"\n    validUntil: DateTime!\n  ): QuickSignup!\n\n  \"\"\"Deactivate a third-party app. Only admins can do this.\"\"\"\n  deactivateApp(\n    \"\"\"The app's ID\"\"\"\n    id: ID!\n  ): Boolean!\n  deleteAnnouncement(id: ID!): Boolean!\n  deleteArticle(id: ID!): Boolean!\n  deleteArticlePicture(id: ID!): Boolean!\n  deleteBarWeek(id: ID!): Boolean!\n  deleteComment(id: ID!): Comment!\n  deleteDocument(id: ID!): Boolean!\n  deleteDocumentFile(documentId: ID!, filename: String!): Boolean!\n  deleteEvent(id: ID!): Boolean!\n  deleteEventManager(eventId: ID!, user: String!): Boolean!\n  deleteEventPicture(id: ID!): Boolean!\n  deleteGodchild(godchildUid: String!, parentUid: String!): Boolean!\n\n  \"\"\"\n  Deletes a pending godparent request. If accept is true, the request will be accepted (and the godparent of the requester will be changed), otherwise it will be rejected (the godparent of the requester won't be changed)\n  \"\"\"\n  deleteGodparentRequest(accept: Boolean!, id: ID!): GodparentRequest!\n  deleteGroup(uid: String!): Boolean!\n  deleteGroupMember(groupId: ID!, memberId: ID!): Boolean!\n  deleteGroupPicture(dark: Boolean!, uid: String!): Boolean!\n  deleteItemPicture(groupUid: String!, itemId: String!, pictureId: String!): Boolean!\n  deleteNotificationSubscription(endpoint: String!): Boolean!\n\n  \"\"\"\n  Supprime une page existante. On peut renseigner l'identifiant de la page ou son chemin ainsi que son groupe ou AE d'appartenance.\n  \"\"\"\n  deletePage(\n    \"\"\"L'UID du groupe auquel la page appartient\"\"\"\n    group: String\n\n    \"\"\"L'identifiant de la page à supprimer\"\"\"\n    id: ID\n\n    \"\"\"Le chemin de la page à supprimer\"\"\"\n    path: String\n\n    \"\"\"L'UID de l'AE à laquelle la page appartient\"\"\"\n    studentAssociation: String\n  ): MutationDeletePageResult!\n  deleteQuickSignup(code: String!): QuickSignup!\n  deleteReaction(articleId: ID, commentId: ID, documentId: ID, emoji: String!, eventId: ID): Boolean!\n  deleteRegistration(id: ID!): Boolean!\n  deleteSchoolPicture(id: String!): String!\n  deleteShopItem(groupUid: String!, itemId: ID!): MutationDeleteShopItemResult!\n  deleteShopOption(optionIds: [String!]!): Boolean!\n  deleteTicket(\n    \"\"\"Supprimer le billet même s'il existe des réservations\"\"\"\n    force: Boolean! = false\n    id: ID!\n  ): Boolean!\n  deleteTicketGroup(id: ID!): Boolean!\n  deleteToken(id: ID!): Boolean!\n  deleteUserPicture(uid: String!): Boolean!\n\n  \"\"\"Update a third-party app's details\"\"\"\n  editApp(\n    allowedRedirectUris: [String!]\n    description: String\n\n    \"\"\"The app's ID\"\"\"\n    id: ID!\n    name: String\n    ownerGroupUid: String\n    website: String\n  ): ThirdPartyApp!\n  finishPaypalRegistrationPayment(orderId: String!): MutationFinishPaypalRegistrationPaymentResult!\n  kioskReload(\n    \"\"\"\n    UID de l'AE sur laquelle on veut indiquer que les kiosques concernés doivent être re-chargés\n    \"\"\"\n    studentAssociation: String!\n  ): Boolean!\n\n  \"\"\"Logs a user in and returns a session token.\"\"\"\n  login(clientId: String, email: String!, password: String!): MutationLoginResult!\n\n  \"\"\"Logs a user out and invalidates the session token.\"\"\"\n  logout: Boolean!\n\n  \"\"\"\n  Envoie une copie des réponses de l'utilisateur·ice connecté·e à ce formulaire par email. Renvoie l'adresse mail à laquelle les réponses ont été envoyées.\n  \"\"\"\n  mailFormAnswers(\n    \"\"\"ID du formulaire\"\"\"\n    formId: ID!\n  ): MutationMailFormAnswersResult!\n  mergeDocuments(from: [ID!]!, into: ID!): Document!\n  opposeRegistration(id: ID!): MutationOpposeRegistrationResult!\n\n  \"\"\"\n  When paying with Paypal, returns the order id for a capture to finish the payment\n  \"\"\"\n  paidRegistration(beneficiary: String, paymentMethod: PaymentMethod, phone: String, regId: ID!): MutationPaidRegistrationResult!\n  paidShopPayment(paymentMethod: PaymentMethod, phone: String, shopPaymentId: ID!): MutationPaidShopPaymentResult!\n  refuseRegistration(email: String!, reason: String!): Boolean!\n\n  \"\"\"\n  Register a third-party OAuth2 client. Returns the client secret. The client secret cannot be retrieved at any other time. Use refreshAppSecret to rotate your client secret.\n  \"\"\"\n  registerApp(\n    \"\"\"Allowed redirect URIs.\"\"\"\n    allowedRedirectUris: [String!]!\n\n    \"\"\"The app's description\"\"\"\n    description: String!\n\n    \"\"\"The app's name\"\"\"\n    name: String!\n\n    \"\"\"The UID of  the group that made this app\"\"\"\n    ownerGroupUid: String!\n\n    \"\"\"\n    URL to the website of the app. Used, amongst other things, to get the icon.\n    \"\"\"\n    website: String!\n  ): ThirdPartyAppRegistrationResponse!\n\n  \"\"\"Enregistrer un token OAuth2 Google pour l'utilisateur connecté.\"\"\"\n  registerGoogleCredential(\n    \"\"\"Le code d'authorisation\"\"\"\n    code: String!\n  ): MutationRegisterGoogleCredentialResult!\n\n  \"\"\"Supprimer un fichier d'une page.\"\"\"\n  removeFileFromPage(filename: String!, page: ID!): MutationRemoveFileFromPageResult!\n  renameSession(id: ID!, name: String!): Boolean!\n  requestEmailChange(email: String!): MutationRequestEmailChangeResult!\n  resetPassword(disconnectAll: Boolean!, newPassword: String!, oldPassword: String!, uid: String!): MutationResetPasswordResult!\n\n  \"\"\"\n  Révoque l'accès d'une application au compte utilisateur connecté. Renvoie `true` si l'opération a réussi.\n  \"\"\"\n  revokeAuthorization(\n    \"\"\"Identifiant de l'application\"\"\"\n    clientId: String!\n  ): Boolean!\n\n  \"\"\"Rotate a third-party app's secret\"\"\"\n  rotateAppSecret(\n    \"\"\"The app's ID\"\"\"\n    id: ID!\n  ): String!\n  selfJoinGroup(groupUid: String!, uid: String!): GroupMember!\n\n  \"\"\"\n  Envoie une notification à l'utilisateur connecté. Limité à une notification par heure. Si l'utilisateur a désactivé les notifications de type “Autres” pour le groupe responsable du [client OAuth](/oauth) faisant la requête, la notification ne lui sera pas envoyée.\n  \n  - **Rate limit:** 1/heure\n  \"\"\"\n  sendNotification(\n    \"\"\"Corps de la notification.\"\"\"\n    body: String!\n\n    \"\"\"\n    Titre de la notification. Sera préfixé par “[Nom de l'application]” quand la mutation est appelée par un [client OAuth](/oauth).\n    \"\"\"\n    title: String!\n  ): Boolean!\n  setDocumentFileIsSolution(documentId: ID!, filename: String!, isSolution: Boolean!): Boolean!\n\n  \"\"\"\n  Coche ou décoche la case à cocher à côté des réponses à un formulaire pour un·e utilisateur·ice.\n  \"\"\"\n  setFormAnswersCheckbox(\n    \"\"\"Vrai pour cocher la case, faux pour la décocher\"\"\"\n    checked: Boolean!\n\n    \"\"\"L'ID du formulaire\"\"\"\n    form: String!\n\n    \"\"\"ID de l'utilisateur·ice\"\"\"\n    userId: ID!\n  ): Form!\n  startRegistration(\n    email: String!\n\n    \"\"\"\n    Code d'inscription rapide, pour s'inscrire sans mail étudiant et sans validation manuelle. Voir QuickSignupType.\n    \"\"\"\n    quickSignupCode: String\n  ): MutationStartRegistrationResult!\n  syncUserLdap(uid: String!): Boolean!\n  testNotification(subscriptionEndpoint: String!): Boolean!\n  toggleReaction(articleId: ID, commentId: ID, documentId: ID, emoji: String!, eventId: ID): Reactable!\n  updateArticlePicture(file: File!, id: ID!): String!\n  updateEventPicture(file: File!, id: ID!): String!\n  updateGroupPicture(dark: Boolean!, file: File!, uid: String!): String!\n  updateItemPicture(file: File!, groupUid: String!, itemId: String!): Picture!\n  updateNotificationSettings(enabledChannels: [NotificationChannel!]!, uid: String!): [NotificationChannel!]!\n\n  \"\"\"Changer si la salle d'un groupe est fermée ou ouvert\"\"\"\n  updateRoomOpenState(\n    \"\"\"L'uid du groupe\"\"\"\n    groupUid: String!\n\n    \"\"\"Vrai si on veut indiquer que le local est maintenant ouvert \"\"\"\n    openRoom: Boolean!\n  ): Boolean!\n  updateSchool(address: String, aliasMailDomains: [String!]!, description: String, name: String!, studentMailDomain: String!, uid: String!): School!\n  updateSchoolPicture(file: File!, id: String!): String!\n  updateStudentAssociationPicture(file: File!, uid: String!): String!\n  updateSubjectsExamDates: Boolean!\n  updateUser(\n    address: String!\n    apprentice: Boolean!\n    birthday: DateTime\n    cededImageRightsToTVn7: Boolean!\n    contributesWith: [ID!]\n    description: String!\n    email: String!\n    firstName: String!\n\n    \"\"\"\n    An empty string removes the godparent. Passing null (or undefined) does not update the godparent. An uid sets the godparent to that uid.\n    \"\"\"\n    godparentUid: String\n    graduationYear: Int\n    lastName: String!\n    links: [LinkInput!]!\n    majorId: ID\n    minorId: ID\n    nickname: String!\n    otherEmails: [String!]!\n    phone: String!\n    uid: UID!\n  ): MutationUpdateUserResult!\n  updateUserCandidate(\n    address: String!\n    birthday: DateTime\n    cededImageRightsToTVn7: Boolean!\n    email: String!\n    firstName: String!\n    graduationYear: Int!\n    lastName: String!\n    majorId: ID!\n    phone: String!\n\n    \"\"\"\n    Inscrire définitivement l'utilisateur·ice si vrai. Si faux, mettre à jour la demande d'inscription sans créer de compte\n    \"\"\"\n    register: Boolean!\n\n    \"\"\"Le @ souhaité\"\"\"\n    uid: UID!\n  ): MutationUpdateUserCandidateResult!\n  updateUserPermissions(canAccessDocuments: Boolean!, uid: String!): User!\n  updateUserPicture(file: File!, uid: String!): String!\n  uploadDocumentFile(documentId: ID!, file: File!, solution: Boolean!): String!\n  upsertAnnouncement(body: String!, endsAt: DateTime!, id: ID, startsAt: DateTime!, title: String!, warning: Boolean!): MutationUpsertAnnouncementResult!\n  upsertArticle(body: String!, event: ID, group: UID!, id: ID, links: [LinkInput!]! = [], publishedAt: DateTime, title: String!, visibility: Visibility!): MutationUpsertArticleResult!\n  upsertBarWeek(description: String!, endsAt: DateTime!, groupsUids: [String!]!, id: ID, startsAt: DateTime!): MutationUpsertBarWeekResult!\n  upsertComment(body: String!, id: ID, inReplyToId: ID, resourceId: ID): Comment!\n  upsertDocument(description: String!, id: ID, schoolYear: Int!, subject: ID!, title: String!, type: DocumentType!): MutationUpsertDocumentResult!\n  upsertEvent(\n    \"\"\"List of user uids\"\"\"\n    bannedUsers: [String!]!\n\n    \"\"\"List of group uids\"\"\"\n    coOrganizers: [String!]!\n    contactMail: String!\n    description: String!\n    endsAt: DateTime!\n    frequency: EventFrequency!\n    groupUid: String!\n    id: String\n\n    \"\"\"Include l'évènement dans l'affichage du mode kiosque\"\"\"\n    includeInKiosk: Boolean\n    links: [LinkInput!]!\n    location: String!\n    lydiaAccountId: String\n    managers: [ManagerOfEventInput!]!\n    recurringUntil: DateTime\n\n    \"\"\"Affiche le nombre de places restantes dans l'évènement\"\"\"\n    showPlacesLeft: Boolean\n    startsAt: DateTime!\n    ticketGroups: [TicketGroupInput!]!\n    tickets: [TicketInput!]!\n    title: String!\n    visibility: Visibility!\n  ): MutationUpsertEventResult!\n\n  \"\"\"\n  Crée ou met à jour un formulaire. À la création, une section de formulaire vide sans titre est automatiquement créée. C'est pratique pour les formulaires sans section.\n  \"\"\"\n  upsertForm(input: MutationUpsertFormInput!): Form!\n\n  \"\"\"Crée ou met à jour une section de formulaire.\"\"\"\n  upsertFormSection(input: MutationUpsertFormSectionInput!): FormSection!\n  upsertGodparentRequest(godchildUid: String!, godparentUid: String!, id: ID): MutationUpsertGodparentRequestResult!\n  upsertGroup(input: UpsertGroupInput!, uid: UID): MutationUpsertGroupResult!\n  upsertGroupMember(canEditArticles: Boolean!, canEditMembers: Boolean!, canScanEvents: Boolean!, groupId: ID!, isDeveloper: Boolean!, memberId: ID!, president: Boolean!, secretary: Boolean!, title: String!, treasurer: Boolean!, vicePresident: Boolean!): GroupMember!\n  upsertLydiaAccount(groupUid: String!, id: ID, name: String!, privateToken: String!, vendorToken: String!): LydiaAccount!\n  upsertManagersOfEvent(eventId: ID!, managers: [ManagerOfEventInput!]!): [EventManager!]!\n  upsertNotificationSubscription(endpoint: String!, expiresAt: DateTime, keys: NotificationSubscriptionKeysInput!, name: String!): NotificationSubscription!\n\n  \"\"\"Crée ou met à jour une page.\"\"\"\n  upsertPage(\n    \"\"\"Le corps de la page. Supporte le markdown\"\"\"\n    body: String!\n\n    \"\"\"L'UID du groupe auquel la page appartient\"\"\"\n    group: String\n\n    \"\"\"\n    Le chemin de la page. Si la page existe déjà, elle sera mise à jour. Sinon, une nouvelle page sera créée. Ne peut contenir que des caractères alphanumériques, des tirets, des tirets du bas et des slashes. Fait pour être utilisé dans des URLs.\n    \"\"\"\n    path: String!\n\n    \"\"\"L'UID de l'AE à laquelle la page appartient\"\"\"\n    studentAssociation: String\n\n    \"\"\"Le titre de la page\"\"\"\n    title: String!\n  ): MutationUpsertPageResult!\n\n  \"\"\"Crée ou met à jour une question.\"\"\"\n  upsertQuestion(input: MutationUpsertQuestionInput!): Question!\n  upsertReaction(articleId: ID, commentId: ID, documentId: ID, emoji: String!, eventId: ID, id: ID): Int!\n  upsertRegistration(authorEmail: String, beneficiary: String, id: ID, paid: Boolean!, paymentMethod: PaymentMethod, ticketId: ID!): MutationUpsertRegistrationResult!\n  upsertService(description: String!, groupUid: String, id: ID, importance: Int = 0, logo: String!, logoSourceType: LogoSourceType!, name: String!, schoolUid: String, studentAssociationUid: String, url: String!): MutationUpsertServiceResult!\n  upsertShopItem(description: String!, endsAt: DateTime, groupUid: String!, id: ID, lydiaAccounId: String, max: Int!, name: String!, paymentMethods: [PaymentMethod!]!, price: Float!, startsAt: DateTime, stock: Int!, visibility: Visibility!): MutationUpsertShopItemResult!\n  upsertShopOptions(itemOptions: [ShopItemOptionInput!]!, shopItemId: String!): Boolean!\n  upsertShopPayment(answers: [String!]!, id: ID, paymentMethod: String, phone: String, quantity: Int!, shopItemId: String!, userUid: String!): MutationUpsertShopPaymentResult!\n  upsertTicketGroup(capacity: Int!, eventId: ID!, id: ID, name: String!, tickets: [ID!]!): TicketGroup!\n  usePasswordReset(newPassword: String!, token: String!): MutationUsePasswordResetResult!\n  validateEmail(token: String!): MutationValidateEmailResult!\n  verifyBooking(\n    \"\"\"Identifiant de l’événement\"\"\"\n    event: ID!\n\n    \"\"\"Identifiant de la place ou code de réservation\"\"\"\n    id: ID!\n  ): MutationVerifyBookingResult!\n}\n\nunion MutationAcceptRegistrationResult = Error | MutationAcceptRegistrationSuccess\n\ntype MutationAcceptRegistrationSuccess {\n  data: User!\n}\n\nunion MutationAddFileToPageResult = Error | MutationAddFileToPageSuccess | ZodError\n\ntype MutationAddFileToPageSuccess {\n  data: Page!\n}\n\nunion MutationAddGroupMemberResult = Error | MutationAddGroupMemberSuccess\n\ntype MutationAddGroupMemberSuccess {\n  data: GroupMember!\n}\n\nunion MutationAnswerFormSectionResult = Error | MutationAnswerFormSectionSuccess\n\ntype MutationAnswerFormSectionSuccess {\n  data: [Answer!]!\n}\n\nunion MutationAuthorizeResult = Error | MutationAuthorizeSuccess | OAuth2Error\n\ntype MutationAuthorizeSuccess {\n  data: String!\n}\n\nunion MutationCancelRegistrationResult = Error | MutationCancelRegistrationSuccess\n\ntype MutationCancelRegistrationSuccess {\n  data: Boolean!\n}\n\nunion MutationCompleteRegistrationResult = Error | MutationCompleteRegistrationSuccess | ZodError\n\ntype MutationCompleteRegistrationSuccess {\n  data: CompleteSignupResult!\n}\n\nunion MutationContributeResult = Error | MutationContributeSuccess\n\ntype MutationContributeSuccess {\n  data: Boolean!\n}\n\nunion MutationCreatePasswordResetResult = Error | MutationCreatePasswordResetSuccess\n\ntype MutationCreatePasswordResetSuccess {\n  data: Boolean!\n}\n\nunion MutationDeletePageResult = Error | MutationDeletePageSuccess | ZodError\n\ntype MutationDeletePageSuccess {\n  data: Page!\n}\n\nunion MutationDeleteShopItemResult = Error | MutationDeleteShopItemSuccess\n\ntype MutationDeleteShopItemSuccess {\n  data: Boolean!\n}\n\nunion MutationFinishPaypalRegistrationPaymentResult = Error | MutationFinishPaypalRegistrationPaymentSuccess\n\ntype MutationFinishPaypalRegistrationPaymentSuccess {\n  data: Boolean!\n}\n\nunion MutationLoginResult = AwaitingValidationError | Error | MutationLoginSuccess\n\ntype MutationLoginSuccess {\n  data: Credential!\n}\n\nunion MutationMailFormAnswersResult = Error | MutationMailFormAnswersSuccess\n\ntype MutationMailFormAnswersSuccess {\n  data: String!\n}\n\nunion MutationOpposeRegistrationResult = Error | MutationOpposeRegistrationSuccess\n\ntype MutationOpposeRegistrationSuccess {\n  data: Boolean!\n}\n\nunion MutationPaidRegistrationResult = Error | MutationPaidRegistrationSuccess\n\ntype MutationPaidRegistrationSuccess {\n  data: String!\n}\n\nunion MutationPaidShopPaymentResult = Error | MutationPaidShopPaymentSuccess\n\ntype MutationPaidShopPaymentSuccess {\n  data: ShopPayment!\n}\n\nunion MutationRegisterGoogleCredentialResult = Error | MutationRegisterGoogleCredentialSuccess\n\ntype MutationRegisterGoogleCredentialSuccess {\n  data: Boolean!\n}\n\nunion MutationRemoveFileFromPageResult = Error | MutationRemoveFileFromPageSuccess | ZodError\n\ntype MutationRemoveFileFromPageSuccess {\n  data: Page!\n}\n\nunion MutationRequestEmailChangeResult = Error | MutationRequestEmailChangeSuccess\n\ntype MutationRequestEmailChangeSuccess {\n  data: Boolean!\n}\n\nunion MutationResetPasswordResult = Error | MutationResetPasswordSuccess\n\ntype MutationResetPasswordSuccess {\n  data: Boolean!\n}\n\nunion MutationStartRegistrationResult = Error | MutationStartRegistrationSuccess | ZodError\n\ntype MutationStartRegistrationSuccess {\n  data: Boolean!\n}\n\nunion MutationUpdateUserCandidateResult = Error | MutationUpdateUserCandidateSuccess | ZodError\n\ntype MutationUpdateUserCandidateSuccess {\n  data: Boolean!\n}\n\nunion MutationUpdateUserResult = Error | MutationUpdateUserSuccess\n\ntype MutationUpdateUserSuccess {\n  data: User!\n}\n\nunion MutationUpsertAnnouncementResult = Error | MutationUpsertAnnouncementSuccess | ZodError\n\ntype MutationUpsertAnnouncementSuccess {\n  data: Announcement!\n}\n\nunion MutationUpsertArticleResult = Error | MutationUpsertArticleSuccess\n\ntype MutationUpsertArticleSuccess {\n  data: Article!\n}\n\nunion MutationUpsertBarWeekResult = Error | MutationUpsertBarWeekSuccess\n\ntype MutationUpsertBarWeekSuccess {\n  data: BarWeek!\n}\n\nunion MutationUpsertDocumentResult = Error | MutationUpsertDocumentSuccess\n\ntype MutationUpsertDocumentSuccess {\n  data: Document!\n}\n\nunion MutationUpsertEventResult = Error | MutationUpsertEventSuccess\n\ntype MutationUpsertEventSuccess {\n  data: Event!\n}\n\ninput MutationUpsertFormInput {\n  closesAt: DateTime\n  description: String! = \"\"\n\n  \"\"\"Identifiant de l'événement à associer au formulaire\"\"\"\n  eventId: ID\n\n  \"\"\"UID du groupe auquel le formulaire est associé.\"\"\"\n  group: String\n\n  \"\"\"\n  Identifiant du formulaire à mettre à jour. Si non fourni, un nouveau formulaire sera créé.\n  \"\"\"\n  id: ID\n  opensAt: DateTime\n  title: String!\n  visibility: Visibility! = Unlisted\n}\n\ninput MutationUpsertFormSectionInput {\n  description: String! = \"\"\n\n  \"\"\"\n  Identifiant du formulaire auquel associer la section. Il n'es pas possible de changer le formulaire auquel une section est associée, si id est fourni, ce paramètre est ignoré. L'ID peut être local\n  \"\"\"\n  formId: String!\n\n  \"\"\"\n  Identifiant de la section à mettre à jour. Si non fourni, une nouvelle section sera créée.\n  \"\"\"\n  id: ID\n\n  \"\"\"\n  Position de la section dans le formulaire. Si non spécifié, la section est ajoutée à la fin du formulaire\n  \"\"\"\n  order: Int\n  title: String!\n}\n\nunion MutationUpsertGodparentRequestResult = Error | MutationUpsertGodparentRequestSuccess\n\ntype MutationUpsertGodparentRequestSuccess {\n  data: GodparentRequest!\n}\n\nunion MutationUpsertGroupResult = Error | MutationUpsertGroupSuccess | ZodError\n\ntype MutationUpsertGroupSuccess {\n  data: Group!\n}\n\nunion MutationUpsertPageResult = Error | MutationUpsertPageSuccess | ZodError\n\ntype MutationUpsertPageSuccess {\n  data: Page!\n}\n\ninput MutationUpsertQuestionInput {\n  \"\"\"\n  Indique si la question doit avoir une option \"Autre\"\n  \"\"\"\n  allowOptionOther: Boolean! = false\n\n  \"\"\"Types de fichiers autorisés pour les questions de type `FileUpload`\"\"\"\n  allowedFiletypes: [String!]\n\n  \"\"\"Indique si les réponses à la question sont anonymes\"\"\"\n  anonymous: Boolean!\n\n  \"\"\"\n  Valeur par défaut de la question. Voir `AnswerInput.answer` pour le format.\n  \"\"\"\n  default: [String!]! = []\n  description: String! = \"\"\n\n  \"\"\"\n  Identifiant du formulaire auquel associer la question. Il n'es pas possible de changer le formulaire auquel une question est associée, si id est fourni, ce paramètre est ignoré.\n  \"\"\"\n  formId: ID\n\n  \"\"\"\n  Identifiant de la question à mettre à jour. Si non fourni, une nouvelle question sera créée.\n  \"\"\"\n  id: ID\n\n  \"\"\"Indique si la question est obligatoire\"\"\"\n  mandatory: Boolean!\n  options: [QuestionOptionInput!]\n\n  \"\"\"\n  Position de la question dans la section. Si non spécifié, rajoute la question à la fin de la section.\n  \"\"\"\n  order: Int\n  scale: QuestionScaleInput\n\n  \"\"\"\n  Identifiant de la section de formulaire à laquelle associer la question. Si non fourni, la question est rajoutée à une section à titre vide, qui est créée au besoin. Pratique pour les formulaires plus simples sans section.\n  \"\"\"\n  sectionId: ID\n  title: String!\n  type: QuestionKind!\n}\n\nunion MutationUpsertRegistrationResult = Error | MutationUpsertRegistrationSuccess\n\ntype MutationUpsertRegistrationSuccess {\n  data: Registration!\n}\n\nunion MutationUpsertServiceResult = Error | MutationUpsertServiceSuccess\n\ntype MutationUpsertServiceSuccess {\n  data: Service!\n}\n\nunion MutationUpsertShopItemResult = Error | MutationUpsertShopItemSuccess\n\ntype MutationUpsertShopItemSuccess {\n  data: ShopItem!\n}\n\nunion MutationUpsertShopPaymentResult = Error | MutationUpsertShopPaymentSuccess\n\ntype MutationUpsertShopPaymentSuccess {\n  data: ShopPayment!\n}\n\nunion MutationUsePasswordResetResult = Error | MutationUsePasswordResetSuccess\n\ntype MutationUsePasswordResetSuccess {\n  data: Boolean!\n}\n\nunion MutationValidateEmailResult = Error | MutationValidateEmailSuccess\n\ntype MutationValidateEmailSuccess {\n  data: Boolean!\n}\n\nunion MutationVerifyBookingResult = Error | MutationVerifyBookingSuccess\n\ntype MutationVerifyBookingSuccess {\n  data: RegistrationVerificationResult!\n}\n\ninterface Node {\n  id: ID!\n}\n\n\"\"\"An error raised when a resource does not exist.\"\"\"\ntype NotFoundError implements ErrorInterface {\n  message: String!\n}\n\n\"\"\"A notification is a push notification that was sent to a user\"\"\"\ntype Notification implements Node {\n  actions: [Link!]!\n  body: String!\n  channel: NotificationChannel!\n  createdAt: DateTime!\n  goto: String!\n  group: Group\n  groupId: ID\n  id: ID!\n  imageFile: String!\n  subscription: NotificationSubscription!\n  subscriptionId: ID!\n  timestamp: DateTime\n  title: String!\n  updatedAt: DateTime!\n  vibrate: [Int!]!\n}\n\nenum NotificationChannel {\n  Articles\n  Comments\n  GodparentRequests\n  GroupBoard\n  Other\n  Permissions\n  Shotguns\n}\n\n\"\"\"\nA NotificationSubscription stores a user's subscription to push notifications on a user agent\n\"\"\"\ntype NotificationSubscription {\n  createdAt: DateTime!\n  endpoint: String!\n  expiresAt: DateTime\n  id: ID!\n  name: String!\n  owner: User!\n  ownerId: ID!\n  updatedAt: DateTime!\n}\n\ninput NotificationSubscriptionKeysInput {\n  auth: String!\n  p256dh: String!\n}\n\ntype OAuth2Error {\n  code: OAuth2ErrorCode!\n  message: String!\n}\n\n\"\"\"OAuth2 error codes, see RFC 6749 § 4.1.2.1\"\"\"\nenum OAuth2ErrorCode {\n  access_denied\n  invalid_request\n  invalid_scope\n  server_error\n  temporarily_unavailable\n  unauthorized_client\n  unsupported_response_type\n}\n\n\"\"\"\nUne page écrite par un·e utilisateur·rice, servant par exemple à présenter les partenariats d'une AE sur une page dédiée.\n\"\"\"\ntype Page {\n  \"\"\"Contenu de la page. Supporte la syntaxe Markdown.\"\"\"\n  body: String!\n\n  \"\"\"Contenu de la page, converti en HTML. Protégé contre les attaques XSS.\"\"\"\n  bodyHtml: String!\n\n  \"\"\"L'utilisateur·ice connecté·e peut modifier ou supprimer cette page\"\"\"\n  canBeEdited: Boolean!\n  createdAt: DateTime!\n\n  \"\"\"\n  Chemin vers les fichiers inclus sur la page, par exmple des images. Voir filesURLs pour obtenir les URLs de ces fichiers.\n  \"\"\"\n  files: [String!]!\n\n  \"\"\"URLs vers les fichiers inclus sur la page.\"\"\"\n  filesURLs: [String!]!\n\n  \"\"\"\n  Groupe auquel appartient la page. Peut être null si la page n'appartient à aucun groupe.\n  \"\"\"\n  group: Group\n  id: ID!\n\n  \"\"\"\n  Dernier·ère utilisateur·rice ayant modifié la page. Peut être null si la page n'a jamais été modifiée, ou que l'utilisateur·ice en question a été supprimé·e.\n  \"\"\"\n  lastAuthor: User\n\n  \"\"\"\n  Chemin vers la page. Doit être unique _par AE ou groupe_. L'URL finale sera donc préfixée d'une certaine manière pour éviter les collisions.\n  \"\"\"\n  path: String!\n\n  \"\"\"\n  Association étudiante à laquelle appartient la page. Peut être null si la page n'appartient à aucune association.\n  \"\"\"\n  studentAssociation: StudentAssociation\n\n  \"\"\"Titre de la page.\"\"\"\n  title: String!\n  updatedAt: DateTime!\n}\n\ntype PageInfo {\n  endCursor: String\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n  startCursor: String\n}\n\ntype PagesConnection {\n  edges: [PagesEdge!]!\n  nodes: [Page!]!\n  pageInfo: PageInfo!\n}\n\ntype PagesEdge {\n  cursor: String!\n  node: Page!\n}\n\nenum PaymentMethod {\n  Card\n  Cash\n  Check\n  Lydia\n  Other\n  PayPal\n  Transfer\n}\n\ntype Picture {\n  id: ID!\n  path: String!\n  position: Int!\n}\n\n\"\"\"Une ressource qui possède une image associée\"\"\"\ninterface Pictured {\n  \"\"\"Le nom du fichier de l'image\"\"\"\n  pictureFile: String!\n\n  \"\"\"Le nom du fichier de l'image, en thème sombre\"\"\"\n  pictureFileDark: String!\n\n  \"\"\"L'URL publique de l'image\"\"\"\n  pictureURL(\n    \"\"\"Utiliser l'image en thème sombre\"\"\"\n    dark: Boolean! = false\n  ): String!\n}\n\ntype ProfitsBreakdown {\n  byPaymentMethod: ProfitsBreakdownByPaymentMethod!\n  byTicket: [ProfitsBreakdownByTicket!]!\n  total: Float!\n}\n\ntype ProfitsBreakdownByPaymentMethod {\n  Card: Float!\n  Cash: Float!\n  Check: Float!\n  Lydia: Float!\n  Other: Float!\n  PayPal: Float!\n  Transfer: Float!\n}\n\ntype ProfitsBreakdownByTicket {\n  amount: Float!\n  id: ID!\n}\n\nenum PromotionType {\n  SIMPPS\n}\n\ntype QRCode {\n  path: String!\n  viewbox: String!\n}\n\n\"\"\"- **Rate limit:** 1200/minute\"\"\"\ntype Query {\n  \"\"\"Get all OAuth2 clients. Only admins can do this.\"\"\"\n  allApps: [ThirdPartyApp!]!\n\n  \"\"\"Récupère tous les formulaires. Réservé aux admins.\"\"\"\n  allForms(after: String, before: String, first: Int, last: Int): QueryAllFormsConnection!\n  allUsers(after: String, before: String, first: Int, last: Int): QueryAllUsersConnection!\n  announcement(\n    \"\"\"ID local ou global\"\"\"\n    id: ID!\n  ): Announcement!\n  announcements(after: String, before: String, first: Int, last: Int): QueryAnnouncementsConnection!\n  announcementsNow: [Announcement!]!\n  article(group: UID!, slug: String!): Article!\n  barWeek(slug: String!): BarWeek!\n  barWeekNow(now: DateTime!): BarWeek\n  barWeeks: [BarWeek!]!\n  birthdays(activeOnly: Boolean, now: DateTime, width: Int): [User!]!\n\n  \"\"\"Retourne des informations sur le build actuel de l'API\"\"\"\n  buildInfo: BuildInfo!\n  changelog(\n    \"\"\"\n    The version to request a changelog for. Defaults to the current version (dev).\n    \"\"\"\n    version: String\n  ): ChangelogRelease!\n  codeContributors: QueryCodeContributorsResult!\n\n  \"\"\"\n  A changelog for multiple versions. \n  Be careful, this range is (from, to]. I.e. **the first version is excluded, and the last is included**. \n  This is way more useful for querying a range of versions for a changelog, but not the usual way ranges are defined.\n  \"\"\"\n  combinedChangelog(\n    \"\"\"\n    The version to start from, **exclusive**. Leave empty to start from the latest version the user has seen\n    \"\"\"\n    from: String\n    sort: SortDirection! = Ascending\n\n    \"\"\"\n    The version to end at, **inclusive**. Leave empty to end at the current version (dev).\n    \"\"\"\n    to: String! = \"dev\"\n  ): QueryCombinedChangelogResult!\n  contributionOptions: [ContributionOption!]!\n  document(slug: String!, subject: ID!): Document!\n  documents(after: String, before: String, first: Int, last: Int): QueryDocumentsConnection!\n  event(group: UID!, slug: String!): Event!\n  eventManager(eventId: ID!, user: String!): EventManager!\n  events(\n    after: String\n    before: String\n    first: Int\n    future: Boolean\n\n    \"\"\"\n    N'include seulement les évènements qui veulent être inclus dans l'affichage kiosque\n    \"\"\"\n    kiosk: Boolean\n    last: Int\n    noLinkedArticles: Boolean\n    past: Boolean\n    pastRecurring: Boolean\n    upcomingShotguns: Boolean\n  ): QueryEventsConnection!\n\n  \"\"\"\n  Tout les évènements, regroupés par date (de début). Les curseurs (before, after) peuvent être des dates au format YYYY-MM-DD\n  \"\"\"\n  eventsByDay(\n    after: String\n    before: String\n    first: Int\n\n    \"\"\"\n    N'include seulement les évènements qui veulent être inclus dans l'affichage kiosque\n    \"\"\"\n    kiosk: Boolean\n    last: Int\n  ): QueryEventsByDayConnection!\n  eventsInWeek(today: DateTime!): [Event!]!\n  existsInSchoolLdap(email: String!): Boolean!\n\n  \"\"\"\n  Récupère un formulaire. On peut utiliser une subscription pour avoir la mise à jour en temps réel des réponses au formulaire.\n  \"\"\"\n  form(\n    \"\"\"Identifiant local (sans le préfixe `form:`) du formulaire\"\"\"\n    localId: String!\n  ): Form\n\n  \"\"\"Récupère les formulaires visibles par l'utilisateur·ice connecté·e.\"\"\"\n  forms(after: String, before: String, first: Int, last: Int): QueryFormsConnection!\n  godparentRequest(id: ID!): GodparentRequest!\n  godparentRequests: [GodparentRequest!]!\n  group(uid: String!): Group!\n  groupMembersCsv(groupUid: String!): QueryGroupMembersCsvResult!\n  groups(types: [GroupType!]): [Group!]!\n\n  \"\"\"- **Rate limit:** 5/seconde\"\"\"\n  healthcheck: HealthCheck!\n\n  \"\"\"Gets the homepage articles, customized if the user is logged in.\"\"\"\n  homepage(after: String, before: String, first: Int, last: Int): QueryHomepageConnection!\n  issue(number: Int!): Issue!\n  issuesByUser: [Issue!]!\n  kioskReload: Boolean!\n  logs(after: String, before: String, first: Int, last: Int): QueryLogsConnection!\n  lydiaAccount(id: ID!): LydiaAccount!\n  lydiaAccounts: [LydiaAccount!]!\n  lydiaAccountsOfGroup(uid: String!): [LydiaAccount!]!\n  major(uid: String!): Major!\n  majors: [Major!]!\n\n  \"\"\"- **Rate limit:** 6000/minute\"\"\"\n  me: User!\n  minor(id: ID!): Minor!\n  minors(after: String, before: String, first: Int, last: Int): QueryMinorsConnection!\n  myApps: [ThirdPartyApp!]!\n  notification(id: ID!): Notification!\n  notificationSubscription(endpoint: String!): NotificationSubscription!\n  notificationSubscriptions: [NotificationSubscription!]!\n  notifications(after: String, before: String, channels: [NotificationChannel!] = [], first: Int, groupUids: [String!] = [], last: Int, subscriptionEndpoint: ID): QueryNotificationsConnection!\n\n  \"\"\"\n  Returns how many people will be notified if an article of the given visibility and group is created.\n  \"\"\"\n  notificationsSendCountForArticle(group: UID!, visibility: Visibility!): Int!\n\n  \"\"\"\n  Récupérer une page par son identifiant. Voir aussi `Group.page` et `StudentAssociation.page` pour des queries plus ergonomiques\n  \"\"\"\n  page(id: ID!): Page!\n\n  \"\"\"\n  Récupère toutes les pages existantes. Réservé aux administrateur·ice.s.\n  \"\"\"\n  pages(after: String, before: String, first: Int, last: Int): QueryPagesConnection!\n  quickSignups(after: String, before: String, first: Int, last: Int): QueryQuickSignupsConnection!\n  reaction(id: ID!): Reaction!\n  reactions(after: String, before: String, first: Int, last: Int): QueryReactionsConnection!\n  registration(id: ID!): QueryRegistrationResult!\n\n  \"\"\"Returns an SVG path of the QR Code for the given registration\"\"\"\n  registrationQRCode(id: ID!): QRCode!\n  registrationsOfUser(after: String, before: String, first: Int, forUserOnly: Boolean, last: Int, userUid: String!): QueryRegistrationsOfUserConnection! @deprecated(reason: \"Utilisez plutôt `user(uid: userUid) { bookings }` (champ `bookings` sur le type `User`).\")\n\n  \"\"\"\n  Rendu de markdown en HTML. Demande a être authentifié·e pour éviter tout abus.\n  \"\"\"\n  renderMarkdown(\n    \"\"\"Le markdown à rendre en HTML\"\"\"\n    markdown: String!\n  ): String!\n  school(uid: String!): School!\n  schoolGroups: [SchoolGroup!]!\n  schools: [School!]!\n  searchArticles(groupUid: String, q: String!): [ArticleSearchResultType!]!\n  searchDocuments(forApprentices: Boolean!, majorUid: String!, q: String!, yearTier: Int!): [DocumentSearchResult!]!\n  searchEvents(groupUid: String, q: String!): [EvenSearchResult!]!\n\n  \"\"\"Recherche des formulaires\"\"\"\n  searchForms(\n    \"\"\"La recherche\"\"\"\n    q: String!\n    similarityCutoff: Float\n  ): [FormSearchResult!]!\n  searchGroups(q: String!, similarityCutoff: Float): [GroupSearchResult!]!\n  searchUsers(q: String!, similarityCutoff: Float): [UserSearchResult!]!\n  service(id: ID!): Service!\n  services(groupUid: String, schoolUid: String, studentAssociationUid: String): [Service!]!\n  shopItem(slug: String!): ShopItem!\n  shopPayments(item: ID!): [ShopPayment!]!\n  studentAssociation(uid: String!): StudentAssociation!\n  studentAssociations(canContributeOnly: Boolean): [StudentAssociation!]!\n  subject(forApprentices: Boolean!, slug: String!, yearTier: Int!): Subject!\n  subjects: [Subject!]!\n  thirdPartyApp(\n    \"\"\"The third party app's client_id. The 'app:' id prefix is optional.\"\"\"\n    id: ID!\n  ): ThirdPartyApp!\n  ticketGroup(id: ID!): TicketGroup!\n\n  \"\"\"Vérifie si un identifiant (un “@” dans l'interface) est disponible\"\"\"\n  uidIsAvailable(uid: UID!): Boolean!\n  upcomingChangelog: QueryUpcomingChangelogResult!\n  user(id: ID, uid: String): User!\n  userByEmail(email: String!): User!\n  userCandidate(token: String!): UserCandidate!\n  userCandidateByEmail(email: String!): UserCandidate!\n  userCandidates(after: String, before: String, first: Int, last: Int): QueryUserCandidatesConnection!\n  userServices: [Service!]!\n}\n\ntype QueryAllFormsConnection {\n  edges: [QueryAllFormsConnectionEdge!]!\n  nodes: [Form!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryAllFormsConnectionEdge {\n  cursor: String!\n  node: Form!\n}\n\ntype QueryAllUsersConnection {\n  edges: [QueryAllUsersConnectionEdge!]!\n  nodes: [User!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryAllUsersConnectionEdge {\n  cursor: String!\n  node: User!\n}\n\ntype QueryAnnouncementsConnection {\n  edges: [QueryAnnouncementsConnectionEdge!]!\n  nodes: [Announcement!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryAnnouncementsConnectionEdge {\n  cursor: String!\n  node: Announcement!\n}\n\nunion QueryCodeContributorsResult = Error | QueryCodeContributorsSuccess\n\ntype QueryCodeContributorsSuccess {\n  data: [User!]!\n}\n\nunion QueryCombinedChangelogResult = Error | QueryCombinedChangelogSuccess\n\ntype QueryCombinedChangelogSuccess {\n  data: [ChangelogRelease!]!\n}\n\ntype QueryDocumentsConnection {\n  edges: [QueryDocumentsConnectionEdge!]!\n  nodes: [Document!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryDocumentsConnectionEdge {\n  cursor: String!\n  node: Document!\n}\n\ntype QueryEventsByDayConnection {\n  edges: [QueryEventsByDayConnectionEdge!]!\n  nodes: [EventsByDay!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryEventsByDayConnectionEdge {\n  cursor: String!\n  node: EventsByDay!\n}\n\ntype QueryEventsConnection {\n  edges: [QueryEventsConnectionEdge!]!\n  nodes: [Event!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryEventsConnectionEdge {\n  cursor: String!\n  node: Event!\n}\n\ntype QueryFormsConnection {\n  edges: [QueryFormsConnectionEdge!]!\n  nodes: [Form!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryFormsConnectionEdge {\n  cursor: String!\n  node: Form!\n}\n\nunion QueryGroupMembersCsvResult = Error | QueryGroupMembersCsvSuccess\n\ntype QueryGroupMembersCsvSuccess {\n  data: String!\n}\n\ntype QueryHomepageConnection {\n  edges: [QueryHomepageConnectionEdge!]!\n  nodes: [Article!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryHomepageConnectionEdge {\n  cursor: String!\n  node: Article!\n}\n\ntype QueryLogsConnection {\n  edges: [QueryLogsConnectionEdge!]!\n  nodes: [LogEntry!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryLogsConnectionEdge {\n  cursor: String!\n  node: LogEntry!\n}\n\ntype QueryMinorsConnection {\n  edges: [QueryMinorsConnectionEdge!]!\n  nodes: [Minor!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryMinorsConnectionEdge {\n  cursor: String!\n  node: Minor!\n}\n\ntype QueryNotificationsConnection {\n  edges: [QueryNotificationsConnectionEdge!]!\n  nodes: [Notification!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryNotificationsConnectionEdge {\n  cursor: String!\n  node: Notification!\n}\n\ntype QueryPagesConnection {\n  edges: [QueryPagesConnectionEdge!]!\n  nodes: [Page!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryPagesConnectionEdge {\n  cursor: String!\n  node: Page!\n}\n\ntype QueryQuickSignupsConnection {\n  edges: [QueryQuickSignupsConnectionEdge!]!\n  nodes: [QuickSignup!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryQuickSignupsConnectionEdge {\n  cursor: String!\n  node: QuickSignup!\n}\n\ntype QueryReactionsConnection {\n  edges: [QueryReactionsConnectionEdge!]!\n  nodes: [Reaction!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryReactionsConnectionEdge {\n  cursor: String!\n  node: Reaction!\n}\n\nunion QueryRegistrationResult = Error | QueryRegistrationSuccess\n\ntype QueryRegistrationSuccess {\n  data: Registration!\n}\n\ntype QueryRegistrationsOfUserConnection {\n  edges: [QueryRegistrationsOfUserConnectionEdge!]!\n  nodes: [Registration!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryRegistrationsOfUserConnectionEdge {\n  cursor: String!\n  node: Registration!\n}\n\nunion QueryUpcomingChangelogResult = Error | QueryUpcomingChangelogSuccess\n\ntype QueryUpcomingChangelogSuccess {\n  data: ChangelogRelease!\n}\n\ntype QueryUserCandidatesConnection {\n  edges: [QueryUserCandidatesConnectionEdge!]!\n  nodes: [UserCandidate!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryUserCandidatesConnectionEdge {\n  cursor: String!\n  node: UserCandidate!\n}\n\n\"\"\"Une question dans un formulaire\"\"\"\ninterface Question {\n  \"\"\"\n  Indique si la réponse à la question est anonyme. Si oui, les personnes pouvant voir les réponses ne pouront jamais savoir la réponse d'une personne à la question\n  \"\"\"\n  anonymous: Boolean!\n  answers(\n    after: String\n    before: String\n\n    \"\"\"Récupérer uniquement les réponses d'un utilisateur, par son uid.\"\"\"\n    by: String\n    first: Int\n    last: Int\n  ): QuestionAnswersConnection!\n\n  \"\"\"\n  La réponse par défaut à cette question. Même si le résultat est bien de type Answer, le champ `id` est vide\n  \"\"\"\n  defaultAnswer: Answer\n\n  \"\"\"Description en Markdown de la question\"\"\"\n  description: String!\n\n  \"\"\"Description en HTML de la question\"\"\"\n  descriptionHtml: String!\n\n  \"\"\"Préfixe d'identifiant: question:\"\"\"\n  id: ID!\n\n  \"\"\"Indique si la question est obligatoire\"\"\"\n  mandatory: Boolean!\n\n  \"\"\"La réponse de l'utilisateur·ice connecté·e à cette question\"\"\"\n  myAnswer: Answer\n\n  \"\"\"Ordre de la question dans la section\"\"\"\n  order: Int!\n\n  \"\"\"Section du formulaire dans laquelle est la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Titre de la question\"\"\"\n  title: String!\n\n  \"\"\"Nombre total de réponses à cette question\"\"\"\n  totalAnswers: Int!\n\n  \"\"\"Type de la question\"\"\"\n  type: QuestionKind!\n}\n\ntype QuestionAnswersConnection {\n  edges: [QuestionAnswersConnectionEdge!]!\n  nodes: [Answer!]!\n  pageInfo: PageInfo!\n}\n\ntype QuestionAnswersConnectionEdge {\n  cursor: String!\n  node: Answer!\n}\n\n\"\"\"Question de type `FileUpload`\"\"\"\ntype QuestionFileUpload implements Question {\n  \"\"\"\n  Types de fichiers autorisés pour les questions de type `File`. Null si la question n'est pas de type `File`.\n  \"\"\"\n  allowedFileTypes: [String!]\n\n  \"\"\"\n  Indique si la réponse à la question est anonyme. Si oui, les personnes pouvant voir les réponses ne pouront jamais savoir la réponse d'une personne à la question\n  \"\"\"\n  anonymous: Boolean!\n  answers(\n    after: String\n    before: String\n\n    \"\"\"Récupérer uniquement les réponses d'un utilisateur, par son uid.\"\"\"\n    by: String\n    first: Int\n    last: Int\n  ): QuestionAnswersConnection!\n\n  \"\"\"\n  La réponse par défaut à cette question. Même si le résultat est bien de type Answer, le champ `id` est vide\n  \"\"\"\n  defaultAnswer: Answer\n\n  \"\"\"Description en Markdown de la question\"\"\"\n  description: String!\n\n  \"\"\"Description en HTML de la question\"\"\"\n  descriptionHtml: String!\n\n  \"\"\"Préfixe d'identifiant: question:\"\"\"\n  id: ID!\n\n  \"\"\"Indique si la question est obligatoire\"\"\"\n  mandatory: Boolean!\n\n  \"\"\"La réponse de l'utilisateur·ice connecté·e à cette question\"\"\"\n  myAnswer: Answer\n\n  \"\"\"Ordre de la question dans la section\"\"\"\n  order: Int!\n\n  \"\"\"Section du formulaire dans laquelle est la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Titre de la question\"\"\"\n  title: String!\n\n  \"\"\"Nombre total de réponses à cette question\"\"\"\n  totalAnswers: Int!\n\n  \"\"\"Type de la question\"\"\"\n  type: QuestionKind!\n}\n\n\"\"\"Le type de question\"\"\"\nenum QuestionKind {\n  \"\"\"La réponse est une date, sans heure associée.\"\"\"\n  Date\n\n  \"\"\"La réponse est un fichier mis en ligne par l'utilisateur·ice.\"\"\"\n  FileUpload\n\n  \"\"\"La réponse est un texte long.\"\"\"\n  LongText\n\n  \"\"\"La réponse est un nombre, potentiellement à virgule.\"\"\"\n  Number\n\n  \"\"\"La réponse est un nombre entier entre deux bornes\"\"\"\n  Scale\n\n  \"\"\"La réponse est une ou plusieurs options parmi une liste.\"\"\"\n  SelectMultiple\n\n  \"\"\"La réponse est une des options parmi une liste.\"\"\"\n  SelectOne\n\n  \"\"\"La réponse est un texte court.\"\"\"\n  Text\n\n  \"\"\"\n  La réponse est un temps  (heures, minute et seconde), sans date associée.\n  \"\"\"\n  Time\n}\n\n\"\"\"Choix pour les questions de type `SelectOne` ou `SelectMultiple`\"\"\"\ninput QuestionOptionInput {\n  \"\"\"ID de la question vers laquelle sauter si ce choix est sélectionné\"\"\"\n  jump: ID\n\n  \"\"\"Choix\"\"\"\n  value: String!\n}\n\n\"\"\"Question de type `Text`, `Number`, `Date`, `Time` ou `LongText`\"\"\"\ntype QuestionScalar implements Question {\n  \"\"\"\n  Indique si la réponse à la question est anonyme. Si oui, les personnes pouvant voir les réponses ne pouront jamais savoir la réponse d'une personne à la question\n  \"\"\"\n  anonymous: Boolean!\n  answers(\n    after: String\n    before: String\n\n    \"\"\"Récupérer uniquement les réponses d'un utilisateur, par son uid.\"\"\"\n    by: String\n    first: Int\n    last: Int\n  ): QuestionAnswersConnection!\n\n  \"\"\"\n  La réponse par défaut à cette question. Même si le résultat est bien de type Answer, le champ `id` est vide\n  \"\"\"\n  defaultAnswer: Answer\n\n  \"\"\"Description en Markdown de la question\"\"\"\n  description: String!\n\n  \"\"\"Description en HTML de la question\"\"\"\n  descriptionHtml: String!\n\n  \"\"\"Préfixe d'identifiant: question:\"\"\"\n  id: ID!\n\n  \"\"\"Indique si la question est obligatoire\"\"\"\n  mandatory: Boolean!\n\n  \"\"\"La réponse de l'utilisateur·ice connecté·e à cette question\"\"\"\n  myAnswer: Answer\n\n  \"\"\"Ordre de la question dans la section\"\"\"\n  order: Int!\n\n  \"\"\"Section du formulaire dans laquelle est la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Titre de la question\"\"\"\n  title: String!\n\n  \"\"\"Nombre total de réponses à cette question\"\"\"\n  totalAnswers: Int!\n\n  \"\"\"Type de la question\"\"\"\n  type: QuestionKind!\n}\n\n\"\"\"Question de type `Scale`\"\"\"\ntype QuestionScale implements Question {\n  \"\"\"\n  Indique si la réponse à la question est anonyme. Si oui, les personnes pouvant voir les réponses ne pouront jamais savoir la réponse d'une personne à la question\n  \"\"\"\n  anonymous: Boolean!\n\n  \"\"\"\n  Compte le nombre total de réponses pour chaque option. Retourne un `StringToIntMapping` où les clés sont les options et les valeurs sont le nombre de réponses pour l'option.\n  \"\"\"\n  answerCounts: [StringToIntMapping!]!\n  answers(\n    after: String\n    before: String\n\n    \"\"\"Récupérer uniquement les réponses d'un utilisateur, par son uid.\"\"\"\n    by: String\n    first: Int\n    last: Int\n  ): QuestionAnswersConnection!\n\n  \"\"\"\n  La réponse par défaut à cette question. Même si le résultat est bien de type Answer, le champ `id` est vide\n  \"\"\"\n  defaultAnswer: Answer\n\n  \"\"\"Description en Markdown de la question\"\"\"\n  description: String!\n\n  \"\"\"Description en HTML de la question\"\"\"\n  descriptionHtml: String!\n\n  \"\"\"Préfixe d'identifiant: question:\"\"\"\n  id: ID!\n\n  \"\"\"Liste des labels pour les valeurs possibles\"\"\"\n  labels: [String!]!\n\n  \"\"\"Indique si la question est obligatoire\"\"\"\n  mandatory: Boolean!\n\n  \"\"\"Valeur maximale\"\"\"\n  maximum: Int!\n\n  \"\"\"Label de la valeur maximale\"\"\"\n  maximumLabel: String!\n\n  \"\"\"Valeur minimale\"\"\"\n  minimum: Int!\n\n  \"\"\"Label de la valeur minimale\"\"\"\n  minimumLabel: String!\n\n  \"\"\"La réponse de l'utilisateur·ice connecté·e à cette question\"\"\"\n  myAnswer: Answer\n\n  \"\"\"Liste des valeurs possibles\"\"\"\n  options: [Int!]!\n\n  \"\"\"Ordre de la question dans la section\"\"\"\n  order: Int!\n\n  \"\"\"Section du formulaire dans laquelle est la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Titre de la question\"\"\"\n  title: String!\n\n  \"\"\"Nombre total de réponses à cette question\"\"\"\n  totalAnswers: Int!\n\n  \"\"\"Type de la question\"\"\"\n  type: QuestionKind!\n}\n\n\"\"\"Options supplémentaires pour les questions de type `Scale`\"\"\"\ninput QuestionScaleInput {\n  \"\"\"Valeur maximale\"\"\"\n  maximum: Int!\n\n  \"\"\"Label de la valeur maximale\"\"\"\n  maximumLabel: String\n\n  \"\"\"Valeur minimale\"\"\"\n  minimum: Int!\n\n  \"\"\"Label de la valeur minimale\"\"\"\n  minimumLabel: String\n}\n\n\"\"\"Question de type `SelectMultiple`\"\"\"\ntype QuestionSelectMultiple implements Question {\n  \"\"\"\n  Indique si la question de type `SelectOne` ou `SelectMultiple` permet une option \"Autre\", que l'utilisateur·ice peut remplir sans contrainte.\n  \"\"\"\n  allowOptionsOther: Boolean!\n\n  \"\"\"\n  Indique si la réponse à la question est anonyme. Si oui, les personnes pouvant voir les réponses ne pouront jamais savoir la réponse d'une personne à la question\n  \"\"\"\n  anonymous: Boolean!\n\n  \"\"\"\n  Compte le nombre total de réponses pour chaque option. Retourne un `StringToIntMapping` où les clés sont les options et les valeurs sont le nombre de réponses pour l'option.\n  \"\"\"\n  answerCounts: [StringToIntMapping!]!\n  answers(\n    after: String\n    before: String\n\n    \"\"\"Récupérer uniquement les réponses d'un utilisateur, par son uid.\"\"\"\n    by: String\n    first: Int\n    last: Int\n  ): QuestionAnswersConnection!\n\n  \"\"\"\n  La réponse par défaut à cette question. Même si le résultat est bien de type Answer, le champ `id` est vide\n  \"\"\"\n  defaultAnswer: Answer\n\n  \"\"\"Description en Markdown de la question\"\"\"\n  description: String!\n\n  \"\"\"Description en HTML de la question\"\"\"\n  descriptionHtml: String!\n\n  \"\"\"Préfixe d'identifiant: question:\"\"\"\n  id: ID!\n\n  \"\"\"Indique si la question est obligatoire\"\"\"\n  mandatory: Boolean!\n\n  \"\"\"La réponse de l'utilisateur·ice connecté·e à cette question\"\"\"\n  myAnswer: Answer\n\n  \"\"\"\n  Uniquement pertinent pour les questions de type `SelectOne` ou `SelectMultiple`\n  \"\"\"\n  options: [String!]!\n\n  \"\"\"Ordre de la question dans la section\"\"\"\n  order: Int!\n\n  \"\"\"Section du formulaire dans laquelle est la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Titre de la question\"\"\"\n  title: String!\n\n  \"\"\"Nombre total de réponses à cette question\"\"\"\n  totalAnswers: Int!\n\n  \"\"\"Type de la question\"\"\"\n  type: QuestionKind!\n}\n\n\"\"\"Question de type `SelectOne`\"\"\"\ntype QuestionSelectOne implements Question {\n  \"\"\"\n  Indique si la question de type `SelectOne` ou `SelectMultiple` permet une option \"Autre\", que l'utilisateur·ice peut remplir sans contrainte.\n  \"\"\"\n  allowOptionsOther: Boolean!\n\n  \"\"\"\n  Indique si la réponse à la question est anonyme. Si oui, les personnes pouvant voir les réponses ne pouront jamais savoir la réponse d'une personne à la question\n  \"\"\"\n  anonymous: Boolean!\n\n  \"\"\"\n  Compte le nombre total de réponses pour chaque option. Retourne un `StringToIntMapping` où les clés sont les options et les valeurs sont le nombre de réponses pour l'option.\n  \"\"\"\n  answerCounts: [StringToIntMapping!]!\n  answers(\n    after: String\n    before: String\n\n    \"\"\"Récupérer uniquement les réponses d'un utilisateur, par son uid.\"\"\"\n    by: String\n    first: Int\n    last: Int\n  ): QuestionAnswersConnection!\n\n  \"\"\"\n  La réponse par défaut à cette question. Même si le résultat est bien de type Answer, le champ `id` est vide\n  \"\"\"\n  defaultAnswer: Answer\n\n  \"\"\"Description en Markdown de la question\"\"\"\n  description: String!\n\n  \"\"\"Description en HTML de la question\"\"\"\n  descriptionHtml: String!\n\n  \"\"\"\n  Dans le même ordre que `options`, contient le groupe si l'option porte exactement le nom du groupe, ou null si aucun groupe ne correspond. Pratique pour les questions où l'on demande à choisir entre plusieurs groupes (comme les votes de listes par ex.)\n  \"\"\"\n  groups: [Group]!\n\n  \"\"\"Préfixe d'identifiant: question:\"\"\"\n  id: ID!\n\n  \"\"\"\n  Correspondances entre les réponses à cette question et les sections du formulaire à sauter vers. Dans le même ordre que `options`. Quand un élément est null, la section suivante n'est pas modifiée\n  \"\"\"\n  jumps: [FormSection]!\n\n  \"\"\"Indique si la question est obligatoire\"\"\"\n  mandatory: Boolean!\n\n  \"\"\"La réponse de l'utilisateur·ice connecté·e à cette question\"\"\"\n  myAnswer: Answer\n\n  \"\"\"\n  Uniquement pertinent pour les questions de type `SelectOne` ou `SelectMultiple`\n  \"\"\"\n  options: [String!]!\n\n  \"\"\"Ordre de la question dans la section\"\"\"\n  order: Int!\n\n  \"\"\"Section du formulaire dans laquelle est la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Titre de la question\"\"\"\n  title: String!\n\n  \"\"\"Nombre total de réponses à cette question\"\"\"\n  totalAnswers: Int!\n\n  \"\"\"Type de la question\"\"\"\n  type: QuestionKind!\n}\n\n\"\"\"\nLien d'inscription rapide, qui permet de créer un compte étudiant sans adresse mail étudiante et sans validation manuelle\n\"\"\"\ntype QuickSignup implements Node {\n  code: String!\n  createdAt: DateTime!\n\n  \"\"\"Vrai si le lien est expiré\"\"\"\n  expired: Boolean!\n  id: ID!\n  school: School!\n  schoolId: ID!\n  updatedAt: DateTime!\n  validUntil: DateTime!\n}\n\n\"\"\"\nUne resource pouvant recevoir des réactions (likes, etc) par les utilisateur·ice·s\n\"\"\"\ninterface Reactable {\n  \"\"\"L’identifiant de la resource\"\"\"\n  id: ID!\n\n  \"\"\"Vrai si l’utilisateur·ice connecté·e a réagi avec cet emoji\"\"\"\n  reacted(emoji: String!): Boolean!\n\n  \"\"\"Nombre total de réactions avec cet emoji\"\"\"\n  reactions(emoji: String!): Int!\n}\n\ntype Reaction implements Node {\n  author: User\n  authorId: ID\n  comment: Comment\n  commentId: ID\n  createdAt: DateTime!\n  document: Document\n  documentId: ID\n  emoji: String!\n  id: ID!\n  updatedAt: DateTime!\n}\n\ntype RedisHealthCheck {\n  \"\"\"Whether the Redis publisher client is ready\"\"\"\n  publish: Boolean!\n\n  \"\"\"Whether the Redis subscriber client is ready\"\"\"\n  subscribe: Boolean!\n}\n\n\"\"\"A reservation is a user's registration for a ticket\"\"\"\ntype Registration implements Node {\n  author: User\n  authorEmail: String!\n  authorId: ID\n  authorIsBeneficiary: Boolean!\n  beneficiary: String!\n  beneficiaryUser: User\n  cancelled: Boolean!\n  cancelledAt: DateTime\n  cancelledBy: User\n  code: String!\n  createdAt: DateTime!\n  id: ID!\n  opposed: Boolean!\n  opposedAt: DateTime\n  opposedBy: User\n  paid: Boolean!\n  paymentMethod: PaymentMethod\n  ticket: Ticket!\n  ticketId: ID!\n  updatedAt: DateTime!\n  verified: Boolean!\n  verifiedAt: DateTime\n  verifiedBy: User\n}\n\ntype RegistrationSearchResult {\n  highlightedBeneficiary: String!\n  id: ID!\n  rank: Float\n  registration: Registration!\n  similarity: Float!\n}\n\ntype RegistrationVerificationResult {\n  registration: Registration\n  state: RegistrationVerificationState!\n}\n\nenum RegistrationVerificationState {\n  AlreadyVerified\n  NotFound\n  NotPaid\n  Ok\n  Opposed\n  OtherEvent\n}\n\ntype RegistrationsCounts {\n  cancelled: Float!\n  paid: Float!\n  total: Float!\n  unpaidLydia: Float!\n  verified: Float!\n}\n\n\"\"\"A change in the changelog\"\"\"\ntype ReleaseChange {\n  \"\"\"The authors of the change\"\"\"\n  authors: [String!]!\n  html: String!\n\n  \"\"\"Issues linked to the change\"\"\"\n  issues: [Int!]!\n\n  \"\"\"Merge requests linked to the change\"\"\"\n  mergeRequests: [Int!]!\n\n  \"\"\"People who created the issues (gave the idea, reported the bug, etc.)\"\"\"\n  reporters: [String!]!\n\n  \"\"\"The text of the change\"\"\"\n  text: String!\n}\n\n\"\"\"Changes in the changelog, grouped by category\"\"\"\ntype ReleaseChangesMaps {\n  \"\"\"New features\"\"\"\n  added: [ReleaseChange!]!\n\n  \"\"\"What was fixed\"\"\"\n  fixed: [ReleaseChange!]!\n\n  \"\"\"What was improved\"\"\"\n  improved: [ReleaseChange!]!\n\n  \"\"\"Miscalleanous changes\"\"\"\n  other: [ReleaseChange!]!\n\n  \"\"\"Security changes\"\"\"\n  security: [ReleaseChange!]!\n\n  \"\"\"Technical changes\"\"\"\n  technical: [ReleaseChange!]!\n}\n\ntype School implements Pictured {\n  address: String!\n  aliasMailDomains: [String!]!\n  color: String!\n  description: String!\n  id: ID!\n  name: String!\n  pictureFile: String!\n\n  \"\"\"Le nom du fichier de l'image, en thème sombre\"\"\"\n  pictureFileDark: String!\n\n  \"\"\"L'URL publique de l'image\"\"\"\n  pictureURL(\n    \"\"\"Utiliser l'image en thème sombre\"\"\"\n    dark: Boolean! = false\n  ): String!\n  services: [Service!]!\n  slug: String!\n  studentAssociations: [StudentAssociation!]!\n  studentMailDomain: String!\n  uid: String!\n}\n\ntype SchoolGroup {\n  majors: [Major!]!\n  names: [String!]!\n}\n\ninput SchoolInput {\n  color: String!\n  id: ID\n  name: String!\n}\n\n\"\"\"A service\"\"\"\ntype Service {\n  description: String!\n  group: Group\n  id: ID!\n  importance: Int!\n  logo: String!\n  logoSourceType: LogoSourceType!\n  name: String!\n  school: School\n  studentAssociation: StudentAssociation\n  url: String!\n}\n\ntype ShopItem {\n  createdAt: DateTime!\n  description: String!\n  descriptionHtml: String!\n  endsAt: DateTime\n  group: Group!\n  id: ID!\n  itemOptions: [ShopItemOption!]!\n  lydiaAccount: LydiaAccount\n  max: Int!\n  name: String!\n  paymentMethods: [PaymentMethod!]!\n  pictures: [Picture!]!\n  price: Float!\n  shopPayments: [ShopPayment!]!\n\n  \"\"\"Un nom lisible sans espaces, adaptés pour des URLs.\"\"\"\n  slug: String!\n  startsAt: DateTime\n  stock: Int!\n  stockLeft: Int!\n  uid: String! @deprecated(reason: \"Use `slug` instead. This field was never universally unique.\")\n  updatedAt: DateTime!\n  visibility: Visibility!\n}\n\ntype ShopItemAnswer {\n  id: ID!\n  options: [String!]!\n  shopPayment: ShopPayment!\n  shopPaymentId: String!\n}\n\ntype ShopItemOption {\n  id: ID!\n  name: String!\n  options: [String!]!\n  otherToggle: Boolean!\n  required: Boolean!\n  shopItem: ShopItem!\n}\n\ninput ShopItemOptionInput {\n  id: String!\n  name: String!\n  options: [String!]!\n  otherToggle: Boolean!\n  required: Boolean!\n}\n\ntype ShopPayment {\n  createdAt: DateTime!\n  id: ID!\n  paid: Boolean!\n  paymentMethod: PaymentMethod!\n  quantity: Int!\n  shopItem: ShopItem!\n  shopItemAnswer: ShopItemAnswer!\n  totalPrice: Float!\n  updatedAt: DateTime!\n  user: User!\n}\n\nenum SortDirection {\n  Ascending\n  Descending\n}\n\n\"\"\"Associe une clé à une valeur de type nombre entier\"\"\"\ntype StringToIntMapping {\n  \"\"\"Clé de la paire\"\"\"\n  key: String!\n\n  \"\"\"Valeur de la paire\"\"\"\n  value: Int!\n}\n\n\"\"\"There is one student association per school\"\"\"\ntype StudentAssociation implements Pictured {\n  \"\"\"\n  Si l'utilsateur·ice courant·e peut créer des groupes rattachés à cette AE\n  \"\"\"\n  canCreateGroups(\n    \"\"\"\n    Quel type de groupe l'on souhaiterait créer. Si non spécifié, renvoie vrai si l'on peut créer au moins un type de groupe\n    \"\"\"\n    type: GroupType\n  ): Boolean!\n\n  \"\"\"\n  L'utilisateur·ice connecté·e peut éditer (créer ou modifier) les pages de l'AE\n  \"\"\"\n  canEditPages: Boolean!\n\n  \"\"\"L'utilisateur·ice connecté·e peut lister les pages de l'AE\"\"\"\n  canListPages: Boolean!\n  contributionOptions: [ContributionOption!]!\n  createdAt: DateTime!\n  description: String!\n  groups(after: String, before: String, first: Int, last: Int, types: [GroupType!]): StudentAssociationGroupsConnection!\n\n  \"\"\"Nombre de groupes reliés à cette AE\"\"\"\n  groupsCount: Int!\n  id: ID!\n  links: [Link!]!\n  name: String!\n\n  \"\"\"La page associée à l'AE\"\"\"\n  page(\n    \"\"\"\n    Le chemin de la page. Ce n'est pas le chemin complet, mais celui qui est local à l'AE. Voir `Page` pour plus d'informations.\n    \"\"\"\n    path: String!\n  ): Page\n\n  \"\"\"Les pages associées à l'AE\"\"\"\n  pages(after: String, before: String, first: Int, last: Int): PagesConnection!\n  pictureFile: String!\n\n  \"\"\"Le nom du fichier de l'image, en thème sombre\"\"\"\n  pictureFileDark: String!\n\n  \"\"\"L'URL publique de l'image\"\"\"\n  pictureURL(\n    \"\"\"Utiliser l'image en thème sombre\"\"\"\n    dark: Boolean! = false\n  ): String!\n  school: School!\n  schoolId: ID!\n  uid: String\n  updatedAt: DateTime!\n}\n\ntype StudentAssociationGroupsConnection {\n  edges: [StudentAssociationGroupsConnectionEdge!]!\n  nodes: [Group!]!\n  pageInfo: PageInfo!\n}\n\ntype StudentAssociationGroupsConnectionEdge {\n  cursor: String!\n  node: Group!\n}\n\ntype Subject {\n  apogeeCode: String\n  documents(after: String, before: String, first: Int, last: Int): SubjectDocumentsConnection!\n  documentsCount: Int!\n  emoji: String!\n  forApprentices: Boolean!\n  id: ID!\n  links: [Link!]!\n  majors: [Major!]!\n  minors: [Minor!]!\n  name: String!\n  nextExamAt: DateTime\n  semester: Int\n  shortName: String!\n\n  \"\"\"Un nom lisible sans espaces, adaptés pour des URLs.\"\"\"\n  slug: String!\n  uid: String! @deprecated(reason: \"Use `slug` instead. This field was never universally unique.\")\n  unit: TeachingUnit\n  unitId: ID\n  yearTier: Int\n}\n\ntype SubjectDocumentsConnection {\n  edges: [SubjectDocumentsConnectionEdge!]!\n  nodes: [Document!]!\n  pageInfo: PageInfo!\n}\n\ntype SubjectDocumentsConnectionEdge {\n  cursor: String!\n  node: Document!\n}\n\n\"\"\"- **Rate limit:** 600 / 10 minutes\"\"\"\ntype Subscription {\n  announcementsNow: [Announcement!]!\n  article(group: UID!, slug: String!): Article!\n  event(group: UID!, slug: String!): Event!\n\n  \"\"\"\n  Récupère un formulaire. On peut utiliser une subscription pour avoir la mise à jour en temps réel des réponses au formulaire.\n  \"\"\"\n  form(\n    \"\"\"Identifiant local (sans le préfixe `form:`) du formulaire\"\"\"\n    localId: String!\n  ): Form\n\n  \"\"\"Gets the homepage articles, customized if the user is logged in.\"\"\"\n  homepage(after: String, before: String, first: Int, last: Int): QueryHomepageConnection!\n  kioskReload: Boolean!\n  registration(id: ID!): SubscriptionRegistrationResult!\n  thirdPartyApp(\n    \"\"\"The third party app's client_id. The 'app:' id prefix is optional.\"\"\"\n    id: ID!\n  ): ThirdPartyApp!\n}\n\nunion SubscriptionRegistrationResult = Error | SubscriptionRegistrationSuccess\n\ntype SubscriptionRegistrationSuccess {\n  data: Registration!\n}\n\ntype TeachingUnit {\n  apogeeCode: String\n  id: ID!\n  name: String!\n  shortName: String!\n  subjects: [Subject!]!\n}\n\n\"\"\"A third-party OAuth2 client\"\"\"\ntype ThirdPartyApp {\n  active: Boolean!\n  allowedRedirectUris: [String!]!\n  apiUsage(after: String, before: String, first: Int, last: Int): ThirdPartyAppApiUsageConnection!\n  clientId: String!\n  createdAt: DateTime!\n  description: String!\n  faviconUrl: String!\n  id: ID!\n\n  \"\"\"\n  Logs de connexion de l'application tierce, utile pour débugger des problèmes. Mise à jour en temps réel disponible via une subscription sur la query `thirdPartyApp`.\n  \"\"\"\n  logs(after: String, before: String, first: Int, last: Int): ThirdPartyAppLogsConnection!\n  name: String!\n  owner: Group!\n  rateLimitHits(after: String, before: String, first: Int, last: Int): ThirdPartyAppRateLimitHitsConnection!\n  secretLength: Int!\n  updatedAt: DateTime\n  users(after: String, before: String, first: Int, last: Int): ThirdPartyAppUsersConnection!\n  usersCount: Int!\n  website: String!\n}\n\ntype ThirdPartyAppApiUsageConnection {\n  edges: [ThirdPartyAppApiUsageConnectionEdge!]!\n  nodes: [ApiUsage!]!\n  pageInfo: PageInfo!\n}\n\ntype ThirdPartyAppApiUsageConnectionEdge {\n  cursor: String!\n  node: ApiUsage!\n}\n\ntype ThirdPartyAppLogsConnection {\n  edges: [ThirdPartyAppLogsConnectionEdge!]!\n  nodes: [LogEntry!]!\n  pageInfo: PageInfo!\n}\n\ntype ThirdPartyAppLogsConnectionEdge {\n  cursor: String!\n  node: LogEntry!\n}\n\ntype ThirdPartyAppRateLimitHitsConnection {\n  edges: [ThirdPartyAppRateLimitHitsConnectionEdge!]!\n  nodes: [ApiRateLimitHits!]!\n  pageInfo: PageInfo!\n}\n\ntype ThirdPartyAppRateLimitHitsConnectionEdge {\n  cursor: String!\n  node: ApiRateLimitHits!\n}\n\ntype ThirdPartyAppRegistrationResponse {\n  client_id: String!\n  client_secret: String!\n}\n\ntype ThirdPartyAppUsersConnection {\n  edges: [ThirdPartyAppUsersConnectionEdge!]!\n  nodes: [User!]!\n  pageInfo: PageInfo!\n  totalCount: Int!\n}\n\ntype ThirdPartyAppUsersConnectionEdge {\n  cursor: String!\n  node: User!\n}\n\n\"\"\"\nA ticket is a way to register for an event. May include a price and conditions.\n\"\"\"\ntype Ticket implements Node {\n  allowedPaymentMethods: [PaymentMethod!]!\n  autojoinGroups: [Group!]!\n  basePrice: Float!\n  capacity: Int!\n  closesAt: DateTime\n  description: String!\n  descriptionHtml: String!\n  event: Event!\n  eventId: ID!\n\n  \"\"\"Full name, including the ticket group's name if any\"\"\"\n  fullName: String!\n  godsonLimit: Int!\n  group: TicketGroup\n  id: ID!\n  links: [Link!]!\n  name: String!\n  onlyManagersCanProvide: Boolean!\n  openToAlumni: Boolean\n  openToApprentices: Boolean\n  openToContributors: Boolean\n  openToExternal: Boolean\n  openToGroups: [Group!]!\n  openToMajors: [Major!]!\n  openToPromotions: [Int!]!\n  openToSchools: [School!]!\n  opensAt: DateTime\n\n  \"\"\"\n  Nombre de places restantes. Null si l'information n'est pas disponible. N'est jamais null quand il n'y a plus de places disponibles (0)\n  \"\"\"\n  placesLeft: Int\n  price: Float!\n  registrations: [Registration!]!\n  remainingGodsons: Int!\n\n  \"\"\"Un nom lisible sans espaces, adaptés pour des URLs.\"\"\"\n  slug: String!\n  ticketGroupId: ID\n  uid: String! @deprecated(reason: \"Use `slug` instead. This field was never universally unique.\")\n}\n\n\"\"\"\nA ticket group allows for conditions on multiple tickets, such as an upper limit on the sum of registrations in the sub-tickets\n\"\"\"\ntype TicketGroup implements Node {\n  capacity: Int!\n  event: Event!\n  eventId: ID!\n  id: ID!\n  name: String!\n  tickets: [Ticket!]!\n}\n\ninput TicketGroupInput {\n  capacity: Int!\n  id: ID\n  name: String!\n}\n\ninput TicketInput {\n  allowedPaymentMethods: [PaymentMethod!]!\n  autojoinGroups: [String!]!\n  capacity: Int!\n  closesAt: DateTime\n  description: String!\n  godsonLimit: Int!\n  groupName: String\n  id: ID\n  links: [LinkInput!]!\n  name: String!\n  onlyManagersCanProvide: Boolean!\n  openToAlumni: Boolean\n  openToApprentices: Boolean\n  openToContributors: Boolean\n  openToExternal: Boolean\n  openToGroups: [String!]!\n  openToMajors: [String!]!\n  openToPromotions: [Int!]!\n  openToSchools: [String!]!\n  opensAt: DateTime\n  price: Float!\n}\n\n\"\"\"A field whose value matches /^[\\w-]{3,255}$/.\"\"\"\nscalar UID\n\ninput UpsertGroupInput {\n  address: String!\n  color: String\n  description: String!\n  email: String\n  links: [LinkInput!]!\n  longDescription: String!\n  mailingList: String\n  name: String!\n  parent: UID\n  related: [String!]!\n  school: UID\n  selfJoinable: Boolean!\n  studentAssociation: UID\n  type: GroupType!\n\n  \"\"\"\n  Ne sert qu'à la création du groupe. Il est impossible de modifier un uid existant\n  \"\"\"\n  uid: UID\n  website: String!\n}\n\n\"\"\"Users are the people who use the app\"\"\"\ntype User implements Node & Pictured {\n  address: String!\n  admin: Boolean!\n\n  \"\"\"\n  Vrai si cette personne est administratrice de l'association étudiante donnée\n  \"\"\"\n  adminOf(\n    \"\"\"UID de l'association étudiante\"\"\"\n    studentAssociation: String!\n  ): Boolean!\n  allowedApps: [ThirdPartyApp!]! @deprecated(reason: \"Use `authorizedApps` instead\")\n\n  \"\"\"Formulaires complètement répondus par l'utilisateur\"\"\"\n  answeredForms(after: String, before: String, first: Int, last: Int): UserAnsweredFormsConnection!\n  apprentice: Boolean!\n  articles(after: String, before: String, first: Int, last: Int): UserArticlesConnection!\n\n  \"\"\"Applications tierces autorisées à accéder à ce compte utilisateur\"\"\"\n  authorizedApps: [ThirdPartyApp!]!\n  birthday: DateTime\n\n  \"\"\"Les affiliations de l'utilisateur à des groupes dont iel est au bureau\"\"\"\n  boardMemberships: [GroupMember!]!\n  booking(beneficiary: String, event: ID!): Registration!\n  bookings(after: String, before: String, first: Int, forUserOnly: Boolean, last: Int): UserBookingsConnection!\n\n  \"\"\"\n  Vrai si cet utilisateur est un bot (i.e. ne représente pas une personne physique)\n  \"\"\"\n  bot: Boolean!\n  canAccessDocuments: Boolean!\n  canBeEdited: Boolean!\n\n  \"\"\"Groupes sur lesquels l'utilisateur·ice peut créer des posts\"\"\"\n  canCreatePostsOn: [Group!]!\n\n  \"\"\"Vrai si cette personne peut éditer le groupe donné\"\"\"\n  canEditGroup(\n    \"\"\"UID du groupe\"\"\"\n    uid: String!\n  ): Boolean!\n\n  \"\"\"Vrai si cette personne peut éditer des groupes\"\"\"\n  canEditGroups: Boolean!\n  cededImageRightsToTVn7: Boolean!\n  contributesTo: [StudentAssociation!]!\n  contributesWith: [ContributionOption!]!\n  createdAt: DateTime!\n  credentials: [Credential!]!\n  description: String!\n  descriptionHtml: String!\n  email: String!\n  emailChangeRequests: [EmailChange!]!\n  enabledNotificationChannels: [NotificationChannel!]!\n  external: Boolean!\n  familyTree: FamilyTree!\n  firstName: String!\n  fullName: String!\n  godchildren: [User!]!\n  godparent: User\n  graduationYear: Int!\n  groups: [GroupMember!]!\n  id: ID!\n  incomingGodparentRequests: [GodparentRequest!]!\n  lastName: String!\n  latestVersionSeenInChangelog: String!\n  links: [Link!]!\n  major: Major\n  majorId: ID\n  managedEvents: [EventManager!]!\n  minor: Minor\n  nickname: String!\n  otherEmails: [String!]!\n  outgoingGodparentRequests: [GodparentRequest!]!\n\n  \"\"\"Formulaires partiellement répondus par l'utilisateur\"\"\"\n  partiallyAnsweredForms(after: String, before: String, first: Int, last: Int): UserPartiallyAnsweredFormsConnection!\n  pendingContributions: [ContributionOption!]!\n  phone: String!\n  pictureFile: String!\n\n  \"\"\"Le nom du fichier de l'image, en thème sombre\"\"\"\n  pictureFileDark: String!\n\n  \"\"\"L'URL publique de l'image\"\"\"\n  pictureURL(\n    \"\"\"Utiliser l'image en thème sombre\"\"\"\n    dark: Boolean! = false\n  ): String!\n  schoolUid: String\n\n  \"\"\"\n  Vrai si cette personne est administratrice d'au moins une association étudiante\n  \"\"\"\n  studentAssociationAdmin: Boolean!\n  uid: String!\n  yearTier: Int!\n}\n\ntype UserAnsweredFormsConnection {\n  edges: [UserAnsweredFormsConnectionEdge!]!\n  nodes: [Form!]!\n  pageInfo: PageInfo!\n}\n\ntype UserAnsweredFormsConnectionEdge {\n  cursor: String!\n  node: Form!\n}\n\ntype UserArticlesConnection {\n  edges: [UserArticlesConnectionEdge!]!\n  nodes: [Article!]!\n  pageInfo: PageInfo!\n}\n\ntype UserArticlesConnectionEdge {\n  cursor: String!\n  node: Article!\n}\n\ntype UserBookingsConnection {\n  edges: [UserBookingsConnectionEdge!]!\n  nodes: [Registration!]!\n  pageInfo: PageInfo!\n}\n\ntype UserBookingsConnectionEdge {\n  cursor: String!\n  node: Registration!\n}\n\n\"\"\"UserCandidates are users in the registration process\"\"\"\ntype UserCandidate implements Node {\n  address: String!\n  apprentice: Boolean!\n  birthday: DateTime\n  cededImageRightsToTVn7: Boolean!\n  createdAt: DateTime\n  email: String!\n\n  \"\"\"Vrai si l'email est une adresse email d'étudiant.\"\"\"\n  emailIsSchoolEmail: Boolean!\n  emailValidated: Boolean!\n  firstName: String!\n  fullName: String!\n  graduationYear: Int!\n  id: ID!\n  lastName: String!\n  major: Major\n  majorId: ID\n\n  \"\"\"\n  Vrai si l'utilisateur aura besoin d'une validation manuelle à la fin de l'inscription. Null si la notion n'a pas encore de sens. Si la filière n'a pas encore été renseignée, retourne vrai seulement si l'inscription devra être validée manuellement si une filière (peut importe laquelle) est choisie. Voir `needsManualValidationForMajor` pour être plus précis\n  \"\"\"\n  needsManualValidation: Boolean\n\n  \"\"\"\n  Vrai si l'utilisateur aura besoin d'une validation manuelle à la fin de l'inscription si iel choisi cette filière. Null si la notion n'a pas encore de sens.\n  \"\"\"\n  needsManualValidationForMajor(\n    \"\"\"L'UID de la filière\"\"\"\n    major: String!\n  ): Boolean\n  phone: String!\n  schoolEmail: String\n  schoolServer: String\n  schoolUid: String\n  suggestedUid: String!\n  uid: String!\n\n  \"\"\"Vrai si l'utilisateur a été créé via un lien d'inscription rapide.\"\"\"\n  usingQuickSignup: Boolean!\n}\n\ntype UserPartiallyAnsweredFormsConnection {\n  edges: [UserPartiallyAnsweredFormsConnectionEdge!]!\n  nodes: [Form!]!\n  pageInfo: PageInfo!\n}\n\ntype UserPartiallyAnsweredFormsConnectionEdge {\n  cursor: String!\n  node: Form!\n}\n\ntype UserSearchResult {\n  highlightedDescription: String!\n  id: ID!\n  rank: Float\n  similarity: Float!\n  user: User!\n}\n\nenum Visibility {\n  GroupRestricted\n  Private\n  Public\n  SchoolRestricted\n  Unlisted\n}\n\n\"\"\"A validation error, as a list of field errors.\"\"\"\ntype ZodError implements ErrorInterface {\n  fieldErrors: [ZodFieldError!]!\n  message: String!\n}\n\n\"\"\"A validation issue for a field.\"\"\"\ntype ZodFieldError {\n  message: String!\n  path: [String!]!\n}",
  "config": {
    "branding": {
      "logo": {
        "dark": "https://churros.inpt.fr/logo-masked.png",
        "light": "/logo-masked-dark.png"
      },
      "name": "Churros API"
    },
    "description": "## Prise en main\n\nL'API de Churros est un API [GraphQL](https://graphql.org/). Pour en savoir plus sur GraphQL, vous\npouvez consulter [la documentation officielle](https://graphql.org/learn/). Mais pour faire simple,\nGraphQL est un langage de requête qui permet de récupérer des données depuis un serveur. Il permet\nde récupérer uniquement les données dont on a besoin, et de les récupérer en une seule requête.\n\n### L'explorateur interactif\n\nAvant de se lancer dans l'utilisation programmatique de l'API, il peut être pratique d'en faire un tour d'horizon avec un _playground_ interactif, disponible en accédant à [churros.app/graphql](https://churros.app/graphql) depuis son navigateur. \n\n### Une première requête\n\nOn peut faire des requêtes GraphQL avec n'importe quel client HTTP. Prenons par exemple la requête suivante:\n\n<pre>\nHTTP/1.1 POST https://churros.app/graphql\n\nContent-Type: application/json\n\n{`{\n  \"query\": \"query { group(uid: \\\"devs\\\") { parent { name } } }\"\n}`}\n</pre>\n\nCette requête récupère le nom du parent du groupe `devs`. On peut voir que la requête est composée\nde deux parties:\n\n- `query`: C'est le type de requête. Ici, c'est une requête de type `query`, qui permet de récupérer\n  des données. Il existe aussi `mutation`, pour modifier, créer ou supprimer des données; et `subscription`, pour s'abonner à des données qui peuvent changer en temps réel (via des [_WebSockets_](/websockets))\n\n- `{ group(uid: \"devs\") { parent { name } } }`: C'est la requête en elle-même. Ici, on demande le\n  nom du parent du groupe `devs`. On peut voir que la requête est composée de plusieurs parties:\n\n  - `group(uid: \"devs\")`: C'est la racine de la requête. Ici, on demande le groupe `devs`. On peut\n  voir que l'on peut passer des arguments à la racine de la requête. Ici, on passe l'argument\n  `uid` avec la valeur `\"devs\"`. On peut voir que l'on peut récupérer plusieurs champs à la racine\n  de la requête. Ici, on récupère le champ `parent`.\n\n  - `parent { name }`: C'est le champ que l'on veut récupérer. Ici, on veut récupérer le champ `name`\n  du parent du groupe `devs`.\n\nOn aura donc la réponse suivante:\n\n```json\n{\n  \"data\": {\n    \"group\": {\n      \"parent\": {\n        \"name\": \"net7\"\n      }\n    }\n  }\n}\n```\n\nOn remarque que la réponse est structurée de la même manière que la requête.\n\n\n### S'authentifier\n\nLa plupart des _queries_ et _mutations_ nécessitent d'être authentifié.\n\nIl y a deux moyens d'authentification:\n\n1. En se connectant avec un compte utilisateur par son mot de passe directement (déconseillé): Voir la [mutation `login`](/users#mutation/login)\n2. Avec une application créée sur Churros (recommandé): Voir la documentation sur l'[OAuth](/oauth)\n\nDans les deux cas, on obtient un token d'authentification. Ce token est à fournir à chaque requête dans le header `Authorization` de la requête HTTP:\n\n```\nAuthorization: Bearer <token>\n```\n\noù `<token>` est le token d'authentification.\n\n## Types spéciaux\n\n### `Result<T>`\n\nCe type représente une réponse de l'API qui pourrait être une erreur. C'est un union constitué de:\n\n- `QueryNomDeLaQuerySuccess`: si la requête réussie. Contient un champ `data` de type `T` qui contient les données de la requête\n- `Error`: si la requête échoue. Contient un champ `message` de type `String` qui contient le message d'erreur.\n- Potentiellement d'autres types d'erreur (par exemple pour la mutation [`authorize`](/oauth#mutation/authorize))\n\n### `Connection<T>`\n\nCes types représentent des réponses paginées de l'API: en effet, il est irréaliste de vouloir renvoyer d'un coup un très grand nombre d'objets, donc l'API n'envoie que les _n_ premiers objets, et fourni un moyen d'avoir accès aux objets suivants si l'on souhaite avoir la liste complète. \n\nDans l'API GraphQL, ces type/Resuls portent comme nom `QueryNomDeLaQueryConnection`, et sont composés de:\n\n- `pageInfo`: informations sur la page courante:\n  - `hasNextPage`: `true` si il y a une page suivante, `false` sinon\n  - `hasPreviousPage`: `true` si il y a une page précédente, `false` sinon\n  - `startCursor`: le curseur du premier élément de la page courante\n  - `endCursor`: le curseur du dernier élément de la page courante\n- `nodes`: la liste des éléments demandés, de type `T`\n- `edges`: une liste d'objets contenant:\n  - `node`: élément de type `T`\n  - `cursor`: le curseur de l'élément\n\nPour récupérer la page suivante, il suffit de ré-appeler la _query_ renvoyant la Connection en question, en fournissant comme argument `after` le champ `endCursor` de la page courante. Par exemple, pour récupérer la page suivante de la liste des groupes:\n\n#### En savoir plus\n\nCe type permet enfait l'implémentation du standard [GraphQL Cursor Connections](https://relay.dev/graphql/connections.htm).\n",
    "footer": "<p>\n  Churros API, version 0.1.0 (at\n  <a href=\"https://git.inpt.fr/inp-net/churros/-/commit/dev\">\n    <code class=\"no-color\">dev</code></a\n  >)\n</p>\n<a class=\"net7\" href=\"https://net7.dev\">\n  Made with <span style:color=\"red\"><strong>&lt;3</strong></span> by\n  <img data-dark src=\"https://churros.inpt.fr/storage/groups/dark/net7-n7.png\" alt=\"net7\" />\n  <img data-light src=\"https://churros.inpt.fr/storage/groups/net7-n7.png\" alt=\"net7\" />\n</a>\n\n<style>\n  .net7 {\n    display: flex;\n    flex-wrap: wrap;\n    column-gap: 1ch;\n    align-items: center;\n    justify-content: center;\n    margin-top: 5rem;\n    font-family: 'Space Mono', monospace;\n    color: var(--fg);\n    text-decoration: none;\n    border-radius: 2rem;\n    transition: box-shadow 0.2s ease;\n  }\n\n  .net7:hover,\n  .net7:focus-visible {\n    box-shadow: 0 0 50px 3px color-mix(in oklab, var(--fg) 15%, var(--shadow));\n  }\n\n  .net7 img {\n    width: 100px;\n    margin-left: 1em;\n  }\n\n  [data-theme=light] .net7 img[data-dark] {\n    display: none;\n  }\n\n  [data-theme=dark] .net7 img[data-light] {\n    display: none;\n  }\n</style>\n",
    "pages": "docs/",
    "schema": {
      "static": "./schema.graphql"
    },
    "static": "docs/static",
    "template": "graphinx/templates/default",
    "modules": {
      "filesystem": {
        "icon": "src/modules/%module%/icon.svg",
        "intro": "src/modules/%module%/README.md",
        "items": [
          {
            "contribution": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/%module%/",
            "files": "src/modules/%module%/{resolvers,types}/*.ts",
            "match": "builder.((query|mutation|subscription)Field|\\w+(Type|Node))\\('(?<name>[^']+)'"
          },
          {
            "contribution": "https://git.inpt.fr/inp-net/churros/-/blob/main/packages/api/src/modules/%module%/",
            "files": "src/modules/%module%/types/*.ts",
            "match": "builder.\\w+(Type|Node)\\(.+, \\{ name: '(?<name>[^']+)' \\}"
          }
        ],
        "names": {
          "in": "src/modules"
        },
        "order": [
          "global",
          "users",
          "groups",
          "posts",
          "events",
          "ticketing",
          "shop",
          "forms",
          "documents",
          "notifications",
          "services",
          "bar-weeks",
          "student-associations",
          "pages",
          "schools",
          "curriculum",
          "comments",
          "reactions",
          "links",
          "oauth",
          "announcements",
          "payments",
          "gitlab",
          "changelogs",
          "logs",
          "health-checks"
        ]
      },
      "index": {
        "description": "Le schéma GraphQL entier",
        "title": "Index"
      }
    }
  },
  "items": [
    {
      "name": "announcementsNow",
      "moduleName": "announcements",
      "type": "query",
      "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/announcements/"
    },
    {
      "name": "searchDocuments",
      "moduleName": "documents",
      "type": "query",
      "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/documents/"
    },
    {
      "name": "ManagerOfEventInput",
      "moduleName": "events",
      "type": "type",
      "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/events/"
    },
    {
      "name": "upsertGroupMember",
      "moduleName": "groups",
      "type": "mutation",
      "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/groups/"
    },
    {
      "name": "GroupType",
      "moduleName": "groups",
      "type": "type",
      "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/packages/api/src/modules/groups/"
    },
    {
      "name": "upsertGroup",
      "moduleName": "groups",
      "type": "mutation",
      "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/groups/"
    },
    {
      "name": "notification",
      "moduleName": "notifications",
      "type": "query",
      "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/notifications/"
    },
    {
      "name": "deactivateApp",
      "moduleName": "oauth",
      "type": "mutation",
      "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/oauth/"
    },
    {
      "name": "lydiaAccountsOfGroup",
      "moduleName": "payments",
      "type": "query",
      "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/payments/"
    },
    {
      "name": "Article",
      "moduleName": "posts",
      "type": "type",
      "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/posts/"
    },
    {
      "name": "reaction",
      "moduleName": "reactions",
      "type": "query",
      "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/reactions/"
    },
    {
      "name": "deleteReaction",
      "moduleName": "reactions",
      "type": "mutation",
      "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/reactions/"
    },
    {
      "name": "school",
      "moduleName": "schools",
      "type": "query",
      "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/schools/"
    },
    {
      "name": "userServices",
      "moduleName": "services",
      "type": "query",
      "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/services/"
    },
    {
      "name": "updateItemPicture",
      "moduleName": "shop",
      "type": "mutation",
      "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/shop/"
    },
    {
      "name": "studentAssociation",
      "moduleName": "student-associations",
      "type": "query",
      "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/student-associations/"
    },
    {
      "name": "cancelRegistration",
      "moduleName": "ticketing",
      "type": "mutation",
      "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/ticketing/"
    },
    {
      "name": "paidRegistration",
      "moduleName": "ticketing",
      "type": "mutation",
      "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/ticketing/"
    },
    {
      "name": "deleteGodparentRequest",
      "moduleName": "users",
      "type": "mutation",
      "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/users/"
    },
    {
      "name": "me",
      "moduleName": "users",
      "type": "query",
      "contributeURL": "https://git.inpt.fr/inp-net/churros/-/blob/main/src/modules/users/"
    }
  ]
};